// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4VProcess> : std::false_type { };
  template<> struct DefaultConstructible<G4VProcess> : std::false_type { };
}

// Class generating the wrapper for type G4VProcess
// signature to use in the veto file: G4VProcess
struct JlG4VProcess: public Wrapper {

  JlG4VProcess(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4VProcess (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:60:7
    jlcxx::TypeWrapper<G4VProcess>  t = jlModule.add_type<G4VProcess>("G4VProcess");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4VProcess>>(new jlcxx::TypeWrapper<G4VProcess>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for G4bool G4VProcess::operator==(const G4VProcess &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VProcess::operator==(const G4VProcess &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:78:12
    t.method("==", [](G4VProcess const& a, const G4VProcess & arg0)->G4bool { return a.operator==(arg0); }, jlcxx::arg("this"), jlcxx::arg("right"));
    t.method("==", [](G4VProcess const* a, const G4VProcess & arg0)->G4bool { return a->operator==(arg0); }, jlcxx::arg("this"), jlcxx::arg("right"));

    DEBUG_MSG("Adding wrapper for G4bool G4VProcess::operator!=(const G4VProcess &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VProcess::operator!=(const G4VProcess &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:79:12
    t.method("!=", [](G4VProcess const& a, const G4VProcess & arg0)->G4bool { return a.operator!=(arg0); }, jlcxx::arg("this"), jlcxx::arg("right"));
    t.method("!=", [](G4VProcess const* a, const G4VProcess & arg0)->G4bool { return a->operator!=(arg0); }, jlcxx::arg("this"), jlcxx::arg("right"));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for G4VParticleChange * G4VProcess::PostStepDoIt(const G4Track &, const G4Step &) (" __HERE__ ")");
    // signature to use in the veto list: G4VParticleChange * G4VProcess::PostStepDoIt(const G4Track &, const G4Step &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:86:32
    t.method("PostStepDoIt", [](G4VProcess& a, const G4Track & arg0, const G4Step & arg1)->G4VParticleChange * { return a.PostStepDoIt(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("stepData"));
    t.method("PostStepDoIt", [](G4VProcess* a, const G4Track & arg0, const G4Step & arg1)->G4VParticleChange * { return a->PostStepDoIt(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("stepData"));

    DEBUG_MSG("Adding wrapper for G4VParticleChange * G4VProcess::AlongStepDoIt(const G4Track &, const G4Step &) (" __HERE__ ")");
    // signature to use in the veto list: G4VParticleChange * G4VProcess::AlongStepDoIt(const G4Track &, const G4Step &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:91:32
    t.method("AlongStepDoIt", [](G4VProcess& a, const G4Track & arg0, const G4Step & arg1)->G4VParticleChange * { return a.AlongStepDoIt(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("stepData"));
    t.method("AlongStepDoIt", [](G4VProcess* a, const G4Track & arg0, const G4Step & arg1)->G4VParticleChange * { return a->AlongStepDoIt(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("stepData"));

    DEBUG_MSG("Adding wrapper for G4VParticleChange * G4VProcess::AtRestDoIt(const G4Track &, const G4Step &) (" __HERE__ ")");
    // signature to use in the veto list: G4VParticleChange * G4VProcess::AtRestDoIt(const G4Track &, const G4Step &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:95:32
    t.method("AtRestDoIt", [](G4VProcess& a, const G4Track & arg0, const G4Step & arg1)->G4VParticleChange * { return a.AtRestDoIt(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("stepData"));
    t.method("AtRestDoIt", [](G4VProcess* a, const G4Track & arg0, const G4Step & arg1)->G4VParticleChange * { return a->AtRestDoIt(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("stepData"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::AlongStepGetPhysicalInteractionLength(const G4Track &, G4double, G4double, G4double &, G4GPILSelection *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::AlongStepGetPhysicalInteractionLength(const G4Track &, G4double, G4double, G4double &, G4GPILSelection *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:113:22
    t.method("AlongStepGetPhysicalInteractionLength", [](G4VProcess& a, const G4Track & arg0, G4double arg1, G4double arg2, G4double & arg3, G4GPILSelection * arg4)->G4double { return a.AlongStepGetPhysicalInteractionLength(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("previousStepSize"), jlcxx::arg("currentMinimumStep"), jlcxx::arg("proposedSafety"), jlcxx::arg("selection"));
    t.method("AlongStepGetPhysicalInteractionLength", [](G4VProcess* a, const G4Track & arg0, G4double arg1, G4double arg2, G4double & arg3, G4GPILSelection * arg4)->G4double { return a->AlongStepGetPhysicalInteractionLength(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("previousStepSize"), jlcxx::arg("currentMinimumStep"), jlcxx::arg("proposedSafety"), jlcxx::arg("selection"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::AtRestGetPhysicalInteractionLength(const G4Track &, G4ForceCondition *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::AtRestGetPhysicalInteractionLength(const G4Track &, G4ForceCondition *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:120:22
    t.method("AtRestGetPhysicalInteractionLength", [](G4VProcess& a, const G4Track & arg0, G4ForceCondition * arg1)->G4double { return a.AtRestGetPhysicalInteractionLength(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("condition"));
    t.method("AtRestGetPhysicalInteractionLength", [](G4VProcess* a, const G4Track & arg0, G4ForceCondition * arg1)->G4double { return a->AtRestGetPhysicalInteractionLength(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("condition"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::PostStepGetPhysicalInteractionLength(const G4Track &, G4double, G4ForceCondition *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::PostStepGetPhysicalInteractionLength(const G4Track &, G4double, G4ForceCondition *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:124:22
    t.method("PostStepGetPhysicalInteractionLength", [](G4VProcess& a, const G4Track & arg0, G4double arg1, G4ForceCondition * arg2)->G4double { return a.PostStepGetPhysicalInteractionLength(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("previousStepSize"), jlcxx::arg("condition"));
    t.method("PostStepGetPhysicalInteractionLength", [](G4VProcess* a, const G4Track & arg0, G4double arg1, G4ForceCondition * arg2)->G4double { return a->PostStepGetPhysicalInteractionLength(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("previousStepSize"), jlcxx::arg("condition"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::GetCurrentInteractionLength() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::GetCurrentInteractionLength()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:154:21
    t.method("GetCurrentInteractionLength", [](G4VProcess const& a)->G4double { return a.GetCurrentInteractionLength(); }, jlcxx::arg("this"));
    t.method("GetCurrentInteractionLength", [](G4VProcess const* a)->G4double { return a->GetCurrentInteractionLength(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::SetPILfactor(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::SetPILfactor(G4double)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:159:17
    t.method("SetPILfactor", [](G4VProcess& a, G4double arg0)->void { a.SetPILfactor(arg0); }, jlcxx::arg("this"), jlcxx::arg("value"));
    t.method("SetPILfactor", [](G4VProcess* a, G4double arg0)->void { a->SetPILfactor(arg0); }, jlcxx::arg("this"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::GetPILfactor() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::GetPILfactor()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:160:21
    t.method("GetPILfactor", [](G4VProcess const& a)->G4double { return a.GetPILfactor(); }, jlcxx::arg("this"));
    t.method("GetPILfactor", [](G4VProcess const* a)->G4double { return a->GetPILfactor(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::AlongStepGPIL(const G4Track &, G4double, G4double, G4double &, G4GPILSelection *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::AlongStepGPIL(const G4Track &, G4double, G4double, G4double &, G4GPILSelection *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:169:21
    t.method("AlongStepGPIL", [](G4VProcess& a, const G4Track & arg0, G4double arg1, G4double arg2, G4double & arg3, G4GPILSelection * arg4)->G4double { return a.AlongStepGPIL(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("previousStepSize"), jlcxx::arg("currentMinimumStep"), jlcxx::arg("proposedSafety"), jlcxx::arg("selection"));
    t.method("AlongStepGPIL", [](G4VProcess* a, const G4Track & arg0, G4double arg1, G4double arg2, G4double & arg3, G4GPILSelection * arg4)->G4double { return a->AlongStepGPIL(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("previousStepSize"), jlcxx::arg("currentMinimumStep"), jlcxx::arg("proposedSafety"), jlcxx::arg("selection"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::AtRestGPIL(const G4Track &, G4ForceCondition *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::AtRestGPIL(const G4Track &, G4ForceCondition *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:175:21
    t.method("AtRestGPIL", [](G4VProcess& a, const G4Track & arg0, G4ForceCondition * arg1)->G4double { return a.AtRestGPIL(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("condition"));
    t.method("AtRestGPIL", [](G4VProcess* a, const G4Track & arg0, G4ForceCondition * arg1)->G4double { return a->AtRestGPIL(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("condition"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::PostStepGPIL(const G4Track &, G4double, G4ForceCondition *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::PostStepGPIL(const G4Track &, G4double, G4ForceCondition *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:178:21
    t.method("PostStepGPIL", [](G4VProcess& a, const G4Track & arg0, G4double arg1, G4ForceCondition * arg2)->G4double { return a.PostStepGPIL(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("previousStepSize"), jlcxx::arg("condition"));
    t.method("PostStepGPIL", [](G4VProcess* a, const G4Track & arg0, G4double arg1, G4ForceCondition * arg2)->G4double { return a->PostStepGPIL(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("track"), jlcxx::arg("previousStepSize"), jlcxx::arg("condition"));

    DEBUG_MSG("Adding wrapper for G4bool G4VProcess::IsApplicable(const G4ParticleDefinition &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VProcess::IsApplicable(const G4ParticleDefinition &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:182:20
    t.method("IsApplicable", [](G4VProcess& a, const G4ParticleDefinition & arg0)->G4bool { return a.IsApplicable(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("IsApplicable", [](G4VProcess* a, const G4ParticleDefinition & arg0)->G4bool { return a->IsApplicable(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::BuildPhysicsTable(const G4ParticleDefinition &) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::BuildPhysicsTable(const G4ParticleDefinition &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:187:18
    t.method("BuildPhysicsTable", [](G4VProcess& a, const G4ParticleDefinition & arg0)->void { a.BuildPhysicsTable(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("BuildPhysicsTable", [](G4VProcess* a, const G4ParticleDefinition & arg0)->void { a->BuildPhysicsTable(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::PreparePhysicsTable(const G4ParticleDefinition &) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::PreparePhysicsTable(const G4ParticleDefinition &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:194:18
    t.method("PreparePhysicsTable", [](G4VProcess& a, const G4ParticleDefinition & arg0)->void { a.PreparePhysicsTable(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("PreparePhysicsTable", [](G4VProcess* a, const G4ParticleDefinition & arg0)->void { a->PreparePhysicsTable(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for G4bool G4VProcess::StorePhysicsTable(const G4ParticleDefinition *, const G4String &, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VProcess::StorePhysicsTable(const G4ParticleDefinition *, const G4String &, G4bool)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:206:20
    t.method("StorePhysicsTable", [](G4VProcess& a, const G4ParticleDefinition * arg0, const G4String & arg1, G4bool arg2)->G4bool { return a.StorePhysicsTable(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("arg1"), jlcxx::arg("arg2"));
    t.method("StorePhysicsTable", [](G4VProcess* a, const G4ParticleDefinition * arg0, const G4String & arg1, G4bool arg2)->G4bool { return a->StorePhysicsTable(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("arg1"), jlcxx::arg("arg2"));

    DEBUG_MSG("Adding wrapper for G4bool G4VProcess::RetrievePhysicsTable(const G4ParticleDefinition *, const G4String &, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VProcess::RetrievePhysicsTable(const G4ParticleDefinition *, const G4String &, G4bool)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:211:20
    t.method("RetrievePhysicsTable", [](G4VProcess& a, const G4ParticleDefinition * arg0, const G4String & arg1, G4bool arg2)->G4bool { return a.RetrievePhysicsTable(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("arg1"), jlcxx::arg("arg2"));
    t.method("RetrievePhysicsTable", [](G4VProcess* a, const G4ParticleDefinition * arg0, const G4String & arg1, G4bool arg2)->G4bool { return a->RetrievePhysicsTable(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("arg1"), jlcxx::arg("arg2"));

    DEBUG_MSG("Adding wrapper for const G4String & G4VProcess::GetPhysicsTableFileName(const G4ParticleDefinition *, const G4String &, const G4String &, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: const G4String & G4VProcess::GetPhysicsTableFileName(const G4ParticleDefinition *, const G4String &, const G4String &, G4bool)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:219:21
    t.method("GetPhysicsTableFileName", [](G4VProcess& a, const G4ParticleDefinition * arg0, const G4String & arg1, const G4String & arg2)->const G4String & { return a.GetPhysicsTableFileName(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("directory"), jlcxx::arg("tableName"));
    t.method("GetPhysicsTableFileName", [](G4VProcess& a, const G4ParticleDefinition * arg0, const G4String & arg1, const G4String & arg2, G4bool arg3)->const G4String & { return a.GetPhysicsTableFileName(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("directory"), jlcxx::arg("tableName"), jlcxx::arg("ascii"));
    t.method("GetPhysicsTableFileName", [](G4VProcess* a, const G4ParticleDefinition * arg0, const G4String & arg1, const G4String & arg2)->const G4String & { return a->GetPhysicsTableFileName(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("directory"), jlcxx::arg("tableName"));
    t.method("GetPhysicsTableFileName", [](G4VProcess* a, const G4ParticleDefinition * arg0, const G4String & arg1, const G4String & arg2, G4bool arg3)->const G4String & { return a->GetPhysicsTableFileName(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("arg0"), jlcxx::arg("directory"), jlcxx::arg("tableName"), jlcxx::arg("ascii"));

    DEBUG_MSG("Adding wrapper for const G4String & G4VProcess::GetProcessName() (" __HERE__ ")");
    // signature to use in the veto list: const G4String & G4VProcess::GetProcessName()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:225:28
    t.method("GetProcessName", [](G4VProcess const& a)->const G4String & { return a.GetProcessName(); }, jlcxx::arg("this"));
    t.method("GetProcessName", [](G4VProcess const* a)->const G4String & { return a->GetProcessName(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for G4ProcessType G4VProcess::GetProcessType() (" __HERE__ ")");
    // signature to use in the veto list: G4ProcessType G4VProcess::GetProcessType()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:228:26
    t.method("GetProcessType", [](G4VProcess const& a)->G4ProcessType { return a.GetProcessType(); }, jlcxx::arg("this"));
    t.method("GetProcessType", [](G4VProcess const* a)->G4ProcessType { return a->GetProcessType(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::SetProcessType(G4ProcessType) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::SetProcessType(G4ProcessType)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:231:17
    t.method("SetProcessType", [](G4VProcess& a, G4ProcessType arg0)->void { a.SetProcessType(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("SetProcessType", [](G4VProcess* a, G4ProcessType arg0)->void { a->SetProcessType(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for G4int G4VProcess::GetProcessSubType() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4VProcess::GetProcessSubType()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:234:18
    t.method("GetProcessSubType", [](G4VProcess const& a)->G4int { return a.GetProcessSubType(); }, jlcxx::arg("this"));
    t.method("GetProcessSubType", [](G4VProcess const* a)->G4int { return a->GetProcessSubType(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::SetProcessSubType(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::SetProcessSubType(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:237:17
    t.method("SetProcessSubType", [](G4VProcess& a, G4int arg0)->void { a.SetProcessSubType(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("SetProcessSubType", [](G4VProcess* a, G4int arg0)->void { a->SetProcessSubType(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for const G4String & G4VProcess::GetProcessTypeName(G4ProcessType) (" __HERE__ ")");
    // signature to use in the veto list: const G4String & G4VProcess::GetProcessTypeName(G4ProcessType)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:240:28
    module_.method("G4VProcess!GetProcessTypeName", [](G4ProcessType arg0)->const G4String & { return G4VProcess::GetProcessTypeName(arg0); }, jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for const G4VProcess * G4VProcess::GetCreatorProcess() (" __HERE__ ")");
    // signature to use in the veto list: const G4VProcess * G4VProcess::GetCreatorProcess()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:243:31
    t.method("GetCreatorProcess", [](G4VProcess const& a)->const G4VProcess * { return a.GetCreatorProcess(); }, jlcxx::arg("this"));
    t.method("GetCreatorProcess", [](G4VProcess const* a)->const G4VProcess * { return a->GetCreatorProcess(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::StartTracking(G4Track *) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::StartTracking(G4Track *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:247:18
    t.method("StartTracking", [](G4VProcess& a, G4Track * arg0)->void { a.StartTracking(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("StartTracking", [](G4VProcess* a, G4Track * arg0)->void { a->StartTracking(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::EndTracking() (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::EndTracking()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:248:18
    t.method("EndTracking", [](G4VProcess& a)->void { a.EndTracking(); }, jlcxx::arg("this"));
    t.method("EndTracking", [](G4VProcess* a)->void { a->EndTracking(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::SetProcessManager(const G4ProcessManager *) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::SetProcessManager(const G4ProcessManager *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:251:18
    t.method("SetProcessManager", [](G4VProcess& a, const G4ProcessManager * arg0)->void { a.SetProcessManager(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("SetProcessManager", [](G4VProcess* a, const G4ProcessManager * arg0)->void { a->SetProcessManager(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for const G4ProcessManager * G4VProcess::GetProcessManager() (" __HERE__ ")");
    // signature to use in the veto list: const G4ProcessManager * G4VProcess::GetProcessManager()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:254:37
    t.method("GetProcessManager", [](G4VProcess& a)->const G4ProcessManager * { return a.GetProcessManager(); }, jlcxx::arg("this"));
    t.method("GetProcessManager", [](G4VProcess* a)->const G4ProcessManager * { return a->GetProcessManager(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::ResetNumberOfInteractionLengthLeft() (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::ResetNumberOfInteractionLengthLeft()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:257:18
    t.method("ResetNumberOfInteractionLengthLeft", [](G4VProcess& a)->void { a.ResetNumberOfInteractionLengthLeft(); }, jlcxx::arg("this"));
    t.method("ResetNumberOfInteractionLengthLeft", [](G4VProcess* a)->void { a->ResetNumberOfInteractionLengthLeft(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::GetNumberOfInteractionLengthLeft() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::GetNumberOfInteractionLengthLeft()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:260:21
    t.method("GetNumberOfInteractionLengthLeft", [](G4VProcess const& a)->G4double { return a.GetNumberOfInteractionLengthLeft(); }, jlcxx::arg("this"));
    t.method("GetNumberOfInteractionLengthLeft", [](G4VProcess const* a)->G4double { return a->GetNumberOfInteractionLengthLeft(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for G4double G4VProcess::GetTotalNumberOfInteractionLengthTraversed() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VProcess::GetTotalNumberOfInteractionLengthTraversed()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:263:21
    t.method("GetTotalNumberOfInteractionLengthTraversed", [](G4VProcess const& a)->G4double { return a.GetTotalNumberOfInteractionLengthTraversed(); }, jlcxx::arg("this"));
    t.method("GetTotalNumberOfInteractionLengthTraversed", [](G4VProcess const* a)->G4double { return a->GetTotalNumberOfInteractionLengthTraversed(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for G4bool G4VProcess::isAtRestDoItIsEnabled() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VProcess::isAtRestDoItIsEnabled()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:267:19
    t.method("isAtRestDoItIsEnabled", [](G4VProcess const& a)->G4bool { return a.isAtRestDoItIsEnabled(); }, jlcxx::arg("this"));
    t.method("isAtRestDoItIsEnabled", [](G4VProcess const* a)->G4bool { return a->isAtRestDoItIsEnabled(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for G4bool G4VProcess::isAlongStepDoItIsEnabled() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VProcess::isAlongStepDoItIsEnabled()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:268:19
    t.method("isAlongStepDoItIsEnabled", [](G4VProcess const& a)->G4bool { return a.isAlongStepDoItIsEnabled(); }, jlcxx::arg("this"));
    t.method("isAlongStepDoItIsEnabled", [](G4VProcess const* a)->G4bool { return a->isAlongStepDoItIsEnabled(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for G4bool G4VProcess::isPostStepDoItIsEnabled() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VProcess::isPostStepDoItIsEnabled()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:269:19
    t.method("isPostStepDoItIsEnabled", [](G4VProcess const& a)->G4bool { return a.isPostStepDoItIsEnabled(); }, jlcxx::arg("this"));
    t.method("isPostStepDoItIsEnabled", [](G4VProcess const* a)->G4bool { return a->isPostStepDoItIsEnabled(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::DumpInfo() (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::DumpInfo()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:274:19
    t.method("DumpInfo", [](G4VProcess const& a)->void { a.DumpInfo(); }, jlcxx::arg("this"));
    t.method("DumpInfo", [](G4VProcess const* a)->void { a->DumpInfo(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::SetVerboseLevel(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::SetVerboseLevel(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:280:18
    t.method("SetVerboseLevel", [](G4VProcess& a, G4int arg0)->void { a.SetVerboseLevel(arg0); }, jlcxx::arg("this"), jlcxx::arg("value"));
    t.method("SetVerboseLevel", [](G4VProcess* a, G4int arg0)->void { a->SetVerboseLevel(arg0); }, jlcxx::arg("this"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for G4int G4VProcess::GetVerboseLevel() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4VProcess::GetVerboseLevel()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:281:18
    t.method("GetVerboseLevel", [](G4VProcess const& a)->G4int { return a.GetVerboseLevel(); }, jlcxx::arg("this"));
    t.method("GetVerboseLevel", [](G4VProcess const* a)->G4int { return a->GetVerboseLevel(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::SetMasterProcess(G4VProcess *) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::SetMasterProcess(G4VProcess *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:287:18
    t.method("SetMasterProcess", [](G4VProcess& a, G4VProcess * arg0)->void { a.SetMasterProcess(arg0); }, jlcxx::arg("this"), jlcxx::arg("masterP"));
    t.method("SetMasterProcess", [](G4VProcess* a, G4VProcess * arg0)->void { a->SetMasterProcess(arg0); }, jlcxx::arg("this"), jlcxx::arg("masterP"));

    DEBUG_MSG("Adding wrapper for const G4VProcess * G4VProcess::GetMasterProcess() (" __HERE__ ")");
    // signature to use in the veto list: const G4VProcess * G4VProcess::GetMasterProcess()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:289:30
    t.method("GetMasterProcess", [](G4VProcess const& a)->const G4VProcess * { return a.GetMasterProcess(); }, jlcxx::arg("this"));
    t.method("GetMasterProcess", [](G4VProcess const* a)->const G4VProcess * { return a->GetMasterProcess(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::BuildWorkerPhysicsTable(const G4ParticleDefinition &) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::BuildWorkerPhysicsTable(const G4ParticleDefinition &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:296:18
    t.method("BuildWorkerPhysicsTable", [](G4VProcess& a, const G4ParticleDefinition & arg0)->void { a.BuildWorkerPhysicsTable(arg0); }, jlcxx::arg("this"), jlcxx::arg("part"));
    t.method("BuildWorkerPhysicsTable", [](G4VProcess* a, const G4ParticleDefinition & arg0)->void { a->BuildWorkerPhysicsTable(arg0); }, jlcxx::arg("this"), jlcxx::arg("part"));

    DEBUG_MSG("Adding wrapper for void G4VProcess::PrepareWorkerPhysicsTable(const G4ParticleDefinition &) (" __HERE__ ")");
    // signature to use in the veto list: void G4VProcess::PrepareWorkerPhysicsTable(const G4ParticleDefinition &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VProcess.hh:304:18
    t.method("PrepareWorkerPhysicsTable", [](G4VProcess& a, const G4ParticleDefinition & arg0)->void { a.PrepareWorkerPhysicsTable(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("PrepareWorkerPhysicsTable", [](G4VProcess* a, const G4ParticleDefinition & arg0)->void { a->PrepareWorkerPhysicsTable(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4VProcess>> type_;
};
std::shared_ptr<Wrapper> newJlG4VProcess(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4VProcess(module));
}

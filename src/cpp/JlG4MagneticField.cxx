// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4MagneticField> : std::false_type { };
  template<> struct DefaultConstructible<G4MagneticField> : std::false_type { };
template<> struct SuperType<G4MagneticField> { typedef G4Field type; };
}

// Class generating the wrapper for type G4MagneticField
// signature to use in the veto file: G4MagneticField
struct JlG4MagneticField: public Wrapper {

  JlG4MagneticField(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4MagneticField (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4MagneticField.hh:40:7
    jlcxx::TypeWrapper<G4MagneticField>  t = jlModule.add_type<G4MagneticField>("G4MagneticField",
      jlcxx::julia_base_type<G4Field>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4MagneticField>>(new jlcxx::TypeWrapper<G4MagneticField>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for G4MagneticField & G4MagneticField::operator=(const G4MagneticField &) (" __HERE__ ")");
    // signature to use in the veto list: G4MagneticField & G4MagneticField::operator=(const G4MagneticField &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4MagneticField.hh:49:22
    t.method("assign", [](G4MagneticField& a, const G4MagneticField & arg0)->G4MagneticField & { return a.operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("assign", [](G4MagneticField* a, const G4MagneticField & arg0)->G4MagneticField & { return a->operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));

    DEBUG_MSG("Adding wrapper for G4bool G4MagneticField::DoesFieldChangeEnergy() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4MagneticField::DoesFieldChangeEnergy()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4MagneticField.hh:52:19
    t.method("DoesFieldChangeEnergy", [](G4MagneticField const& a)->G4bool { return a.DoesFieldChangeEnergy(); }, jlcxx::arg("this"));
    t.method("DoesFieldChangeEnergy", [](G4MagneticField const* a)->G4bool { return a->DoesFieldChangeEnergy(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4MagneticField::GetFieldValue(const G4double[4], G4double *) (" __HERE__ ")");
    // signature to use in the veto list: void G4MagneticField::GetFieldValue(const G4double[4], G4double *)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4MagneticField.hh:55:10
    t.method("GetFieldValue", [](G4MagneticField const& a, const G4double arg0[4], G4double * arg1)->void { a.GetFieldValue(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("Point"), jlcxx::arg("Bfield"));
    t.method("GetFieldValue", [](G4MagneticField const* a, const G4double arg0[4], G4double * arg1)->void { a->GetFieldValue(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("Point"), jlcxx::arg("Bfield"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4MagneticField>> type_;
};
std::shared_ptr<Wrapper> newJlG4MagneticField(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4MagneticField(module));
}

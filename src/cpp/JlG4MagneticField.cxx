// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4MagneticField> : std::false_type { };
  template<> struct DefaultConstructible<G4MagneticField> : std::false_type { };
template<> struct SuperType<G4MagneticField> { typedef G4Field type; };
}

// Class generating the wrapper for type G4MagneticField
// signature to use in the veto file: G4MagneticField
struct JlG4MagneticField: public Wrapper {

  JlG4MagneticField(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4MagneticField (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4MagneticField.hh:40:7
    jlcxx::TypeWrapper<G4MagneticField>  t = jlModule.add_type<G4MagneticField>("G4MagneticField",
      jlcxx::julia_base_type<G4Field>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4MagneticField>>(new jlcxx::TypeWrapper<G4MagneticField>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for G4MagneticField & G4MagneticField::operator=(const G4MagneticField &) (" __HERE__ ")");
    // signature to use in the veto list: G4MagneticField & G4MagneticField::operator=(const G4MagneticField &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4MagneticField.hh:49:22
    t.method("assign", static_cast<G4MagneticField & (G4MagneticField::*)(const G4MagneticField &) >(&G4MagneticField::operator=));

    DEBUG_MSG("Adding wrapper for G4bool G4MagneticField::DoesFieldChangeEnergy() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4MagneticField::DoesFieldChangeEnergy()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4MagneticField.hh:52:19
    t.method("DoesFieldChangeEnergy", static_cast<G4bool (G4MagneticField::*)()  const>(&G4MagneticField::DoesFieldChangeEnergy));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4MagneticField>> type_;
};
std::shared_ptr<Wrapper> newJlG4MagneticField(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4MagneticField(module));
}

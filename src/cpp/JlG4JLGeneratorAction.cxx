// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4JLGeneratorAction> : std::false_type { };
  template<> struct DefaultConstructible<G4JLGeneratorAction> : std::false_type { };
template<> struct SuperType<G4JLGeneratorAction> { typedef G4VUserPrimaryGeneratorAction type; };
}

// Class generating the wrapper for type G4JLGeneratorAction
// signature to use in the veto file: G4JLGeneratorAction
struct JlG4JLGeneratorAction: public Wrapper {

  JlG4JLGeneratorAction(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4JLGeneratorAction (" __HERE__ ")");
    // defined in cpp/Geant4Wrap.h:148:7
    jlcxx::TypeWrapper<G4JLGeneratorAction>  t = jlModule.add_type<G4JLGeneratorAction>("G4JLGeneratorAction",
      jlcxx::julia_base_type<G4VUserPrimaryGeneratorAction>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4JLGeneratorAction>>(new jlcxx::TypeWrapper<G4JLGeneratorAction>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4JLGeneratorAction::G4JLGeneratorAction(generate_f, void *) (" __HERE__ ")");
    // defined in cpp/Geant4Wrap.h:150:3
    t.constructor<generate_f, void *>(/*finalize=*/jlcxx::finalize_policy::no, jlcxx::arg("this"), jlcxx::arg("f"), jlcxx::arg("d")    );

    DEBUG_MSG("Adding wrapper for void G4JLGeneratorAction::GeneratePrimaries(G4Event *) (" __HERE__ ")");
    // signature to use in the veto list: void G4JLGeneratorAction::GeneratePrimaries(G4Event *)
    // defined in cpp/Geant4Wrap.h:152:8
    t.method("GeneratePrimaries", [](G4JLGeneratorAction& a, G4Event * arg0)->void { a.GeneratePrimaries(arg0); }, jlcxx::arg("this"), jlcxx::arg("event"));
    t.method("GeneratePrimaries", [](G4JLGeneratorAction* a, G4Event * arg0)->void { a->GeneratePrimaries(arg0); }, jlcxx::arg("this"), jlcxx::arg("event"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4JLGeneratorAction>> type_;
};
std::shared_ptr<Wrapper> newJlG4JLGeneratorAction(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4JLGeneratorAction(module));
}

// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<QBBC> : std::false_type { };
  template<> struct DefaultConstructible<QBBC> : std::false_type { };
template<> struct SuperType<QBBC> { typedef G4VModularPhysicsList type; };
}

// Class generating the wrapper for type QBBC
// signature to use in the veto file: QBBC
struct JlQBBC: public Wrapper {

  JlQBBC(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type QBBC (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/QBBC.hh:43:7
    jlcxx::TypeWrapper<QBBC>  t = jlModule.add_type<QBBC>("QBBC",
      jlcxx::julia_base_type<G4VModularPhysicsList>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<QBBC>>(new jlcxx::TypeWrapper<QBBC>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void QBBC::QBBC(G4int, const G4String &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/QBBC.hh:47:12
    t.constructor<G4int>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("ver")    );
    t.constructor<G4int, const G4String &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("ver"), jlcxx::arg("type")    );
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<QBBC>> type_;
};
std::shared_ptr<Wrapper> newJlQBBC(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlQBBC(module));
}

// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<CLHEP::Hep2Vector> : std::false_type { };
  template<> struct DefaultConstructible<CLHEP::Hep2Vector> : std::false_type { };
}

// Class generating the wrapper for type CLHEP::Hep2Vector
// signature to use in the veto file: CLHEP::Hep2Vector
struct JlCLHEP_Hep2Vector: public Wrapper {

  JlCLHEP_Hep2Vector(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type CLHEP::Hep2Vector (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:44:7
    jlcxx::TypeWrapper<CLHEP::Hep2Vector>  t = jlModule.add_type<CLHEP::Hep2Vector>("CLHEP!Hep2Vector");
    jlcxx::stl::apply_stl<CLHEP::Hep2Vector>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<CLHEP::Hep2Vector>>(new jlcxx::TypeWrapper<CLHEP::Hep2Vector>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::Hep2Vector(double, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:51:10
    t.constructor<double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<double, double>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::Hep2Vector(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:54:10
    t.constructor<const CLHEP::Hep2Vector &>(/*finalize=*/jlcxx::finalize_policy::yes);



    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::Hep2Vector(const CLHEP::Hep3Vector &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:58:12
    t.constructor<const CLHEP::Hep3Vector &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::x() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::x()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:66:17
    t.method("x", static_cast<double (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::x));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::y() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::y()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:67:17
    t.method("y", static_cast<double (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::y));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::operator()(int) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::operator()(int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:70:17
    t.method("paren", static_cast<double (CLHEP::Hep2Vector::*)(int)  const>(&CLHEP::Hep2Vector::operator()));
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding getindex method to wrap double CLHEP::Hep2Vector::operator[](int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:71:17
    t.method("getindex",
      [](CLHEP::Hep2Vector& a, int i){
      return a[i];
    });

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for double & CLHEP::Hep2Vector::operator()(int) (" __HERE__ ")");
    // signature to use in the veto list: double & CLHEP::Hep2Vector::operator()(int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:74:19
    t.method("paren", static_cast<double & (CLHEP::Hep2Vector::*)(int) >(&CLHEP::Hep2Vector::operator()));
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding setindex! method  to wrap double & CLHEP::Hep2Vector::operator[](int) (" __HERE__ ")");
// defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:75:19
    t.method("setindex!",
      [](CLHEP::Hep2Vector& a, int i, double const & val){
      return a[i] = val;
    });

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setX(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setX(double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:78:15
    t.method("setX", static_cast<void (CLHEP::Hep2Vector::*)(double) >(&CLHEP::Hep2Vector::setX));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setY(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setY(double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:79:15
    t.method("setY", static_cast<void (CLHEP::Hep2Vector::*)(double) >(&CLHEP::Hep2Vector::setY));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::set(double, double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::set(double, double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:80:15
    t.method("set", static_cast<void (CLHEP::Hep2Vector::*)(double, double) >(&CLHEP::Hep2Vector::set));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::phi() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::phi()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:83:17
    t.method("phi", static_cast<double (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::phi));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::mag2() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::mag2()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:86:17
    t.method("mag2", static_cast<double (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::mag2));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::mag() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::mag()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:89:17
    t.method("mag", static_cast<double (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::mag));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::r() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::r()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:92:17
    t.method("r", static_cast<double (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::r));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setPhi(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setPhi(double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:95:15
    t.method("setPhi", static_cast<void (CLHEP::Hep2Vector::*)(double) >(&CLHEP::Hep2Vector::setPhi));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setMag(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setMag(double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:98:15
    t.method("setMag", static_cast<void (CLHEP::Hep2Vector::*)(double) >(&CLHEP::Hep2Vector::setMag));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setR(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setR(double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:101:15
    t.method("setR", static_cast<void (CLHEP::Hep2Vector::*)(double) >(&CLHEP::Hep2Vector::setR));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setPolar(double, double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setPolar(double, double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:104:15
    t.method("setPolar", static_cast<void (CLHEP::Hep2Vector::*)(double, double) >(&CLHEP::Hep2Vector::setPolar));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:107:23
    t.method("assign", static_cast<CLHEP::Hep2Vector & (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &) >(&CLHEP::Hep2Vector::operator=));

    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator==(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator==(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:111:15
    t.method("==", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::operator==));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator!=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator!=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:112:15
    t.method("!=", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::operator!=));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for int CLHEP::Hep2Vector::compare(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: int CLHEP::Hep2Vector::compare(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:115:7
    t.method("compare", static_cast<int (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::compare));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator>(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator>(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:116:8
    t.method(">", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::operator>));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator<(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator<(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:117:8
    t.method("<", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::operator<));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator>=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator>=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:118:8
    t.method(">=", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::operator>=));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator<=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator<=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:119:8
    t.method("<=", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::operator<=));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::getTolerance() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::getTolerance()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:122:24
    module_.method("CLHEP!Hep2Vector!getTolerance", static_cast<double (*)() >(&CLHEP::Hep2Vector::getTolerance));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::setTolerance(double) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::setTolerance(double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:123:17
    module_.method("CLHEP!Hep2Vector!setTolerance", static_cast<double (*)(double) >(&CLHEP::Hep2Vector::setTolerance));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::howNear(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::howNear(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:125:10
    t.method("howNear", static_cast<double (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::howNear));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::isNear(const CLHEP::Hep2Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::isNear(const CLHEP::Hep2Vector &, double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:126:8
    t.method("isNear", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &, double)  const>(&CLHEP::Hep2Vector::isNear));
    t.method("isNear", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.isNear(arg0); });
    t.method("isNear", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->isNear(arg0); });

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::howParallel(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::howParallel(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:128:10
    t.method("howParallel", static_cast<double (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::howParallel));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::isParallel(const CLHEP::Hep2Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::isParallel(const CLHEP::Hep2Vector &, double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:129:8
    t.method("isParallel", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &, double)  const>(&CLHEP::Hep2Vector::isParallel));
    t.method("isParallel", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.isParallel(arg0); });
    t.method("isParallel", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->isParallel(arg0); });

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::howOrthogonal(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::howOrthogonal(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:132:10
    t.method("howOrthogonal", static_cast<double (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::howOrthogonal));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::isOrthogonal(const CLHEP::Hep2Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::isOrthogonal(const CLHEP::Hep2Vector &, double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:133:8
    t.method("isOrthogonal", static_cast<bool (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &, double)  const>(&CLHEP::Hep2Vector::isOrthogonal));
    t.method("isOrthogonal", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.isOrthogonal(arg0); });
    t.method("isOrthogonal", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->isOrthogonal(arg0); });

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator+=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator+=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:136:23
    t.method("add!", static_cast<CLHEP::Hep2Vector & (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &) >(&CLHEP::Hep2Vector::operator+=));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator-=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator-=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:139:23
    t.method("sub!", static_cast<CLHEP::Hep2Vector & (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &) >(&CLHEP::Hep2Vector::operator-=));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector CLHEP::Hep2Vector::operator-() (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector CLHEP::Hep2Vector::operator-()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:142:21
    t.method("-", static_cast<CLHEP::Hep2Vector (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::operator-));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator*=(double) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator*=(double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:145:23
    t.method("mult!", static_cast<CLHEP::Hep2Vector & (CLHEP::Hep2Vector::*)(double) >(&CLHEP::Hep2Vector::operator*=));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector CLHEP::Hep2Vector::unit() (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector CLHEP::Hep2Vector::unit()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:148:21
    t.method("unit", static_cast<CLHEP::Hep2Vector (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::unit));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector CLHEP::Hep2Vector::orthogonal() (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector CLHEP::Hep2Vector::orthogonal()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:151:21
    t.method("orthogonal", static_cast<CLHEP::Hep2Vector (CLHEP::Hep2Vector::*)()  const>(&CLHEP::Hep2Vector::orthogonal));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::dot(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::dot(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:154:17
    t.method("dot", static_cast<double (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::dot));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::angle(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::angle(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:157:17
    t.method("angle", static_cast<double (CLHEP::Hep2Vector::*)(const CLHEP::Hep2Vector &)  const>(&CLHEP::Hep2Vector::angle));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::rotate(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::rotate(double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Vector/TwoVector.h:160:8
    t.method("rotate", static_cast<void (CLHEP::Hep2Vector::*)(double) >(&CLHEP::Hep2Vector::rotate));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<CLHEP::Hep2Vector>> type_;
};
std::shared_ptr<Wrapper> newJlCLHEP_Hep2Vector(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlCLHEP_Hep2Vector(module));
}

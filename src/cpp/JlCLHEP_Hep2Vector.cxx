// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<CLHEP::Hep2Vector> : std::false_type { };
  template<> struct DefaultConstructible<CLHEP::Hep2Vector> : std::false_type { };
}

// Class generating the wrapper for type CLHEP::Hep2Vector
// signature to use in the veto file: CLHEP::Hep2Vector
struct JlCLHEP_Hep2Vector: public Wrapper {

  JlCLHEP_Hep2Vector(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type CLHEP::Hep2Vector (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:44:7
    jlcxx::TypeWrapper<CLHEP::Hep2Vector>  t = jlModule.add_type<CLHEP::Hep2Vector>("CLHEP!Hep2Vector");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<CLHEP::Hep2Vector>>(new jlcxx::TypeWrapper<CLHEP::Hep2Vector>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::Hep2Vector(double, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:51:10
    t.constructor<double>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("x")    );
    t.constructor<double, double>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y")    );


    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::Hep2Vector(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:54:10
    t.constructor<const CLHEP::Hep2Vector &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("p")    );



    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::Hep2Vector(const CLHEP::Hep3Vector &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:58:12
    t.constructor<const CLHEP::Hep3Vector &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("arg0")    );

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::x() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::x()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:66:17
    t.method("x", [](CLHEP::Hep2Vector const& a)->double { return a.x(); }, jlcxx::arg("this"));
    t.method("x", [](CLHEP::Hep2Vector const* a)->double { return a->x(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::y() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::y()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:67:17
    t.method("y", [](CLHEP::Hep2Vector const& a)->double { return a.y(); }, jlcxx::arg("this"));
    t.method("y", [](CLHEP::Hep2Vector const* a)->double { return a->y(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::operator()(int) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::operator()(int)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:70:17
    t.method("paren", [](CLHEP::Hep2Vector const& a, int arg0)->double { return a.operator()(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("paren", [](CLHEP::Hep2Vector const* a, int arg0)->double { return a->operator()(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding getindex method to wrap double CLHEP::Hep2Vector::operator[](int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:71:17
    t.method("getindex",
      [](CLHEP::Hep2Vector& a, int i){
      return a[i];
    }, jlcxx::arg("this"), jlcxx::arg("index"));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for double & CLHEP::Hep2Vector::operator()(int) (" __HERE__ ")");
    // signature to use in the veto list: double & CLHEP::Hep2Vector::operator()(int)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:74:19
    t.method("paren", [](CLHEP::Hep2Vector& a, int arg0)->double & { return a.operator()(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    t.method("paren", [](CLHEP::Hep2Vector* a, int arg0)->double & { return a->operator()(arg0); }, jlcxx::arg("this"), jlcxx::arg("i"));
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding setindex! method  to wrap double & CLHEP::Hep2Vector::operator[](int) (" __HERE__ ")");
// defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:75:19
    t.method("setindex!",
      [](CLHEP::Hep2Vector& a, int i, double const & val){
      return a[i] = val;
    }, jlcxx::arg("this"), jlcxx::arg("index"), jlcxx::arg("value"));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setX(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setX(double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:78:15
    t.method("setX", [](CLHEP::Hep2Vector& a, double arg0)->void { a.setX(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));
    t.method("setX", [](CLHEP::Hep2Vector* a, double arg0)->void { a->setX(arg0); }, jlcxx::arg("this"), jlcxx::arg("x"));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setY(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setY(double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:79:15
    t.method("setY", [](CLHEP::Hep2Vector& a, double arg0)->void { a.setY(arg0); }, jlcxx::arg("this"), jlcxx::arg("y"));
    t.method("setY", [](CLHEP::Hep2Vector* a, double arg0)->void { a->setY(arg0); }, jlcxx::arg("this"), jlcxx::arg("y"));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::set(double, double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::set(double, double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:80:15
    t.method("set", [](CLHEP::Hep2Vector& a, double arg0, double arg1)->void { a.set(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"));
    t.method("set", [](CLHEP::Hep2Vector* a, double arg0, double arg1)->void { a->set(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("x"), jlcxx::arg("y"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::phi() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::phi()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:83:17
    t.method("phi", [](CLHEP::Hep2Vector const& a)->double { return a.phi(); }, jlcxx::arg("this"));
    t.method("phi", [](CLHEP::Hep2Vector const* a)->double { return a->phi(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::mag2() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::mag2()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:86:17
    t.method("mag2", [](CLHEP::Hep2Vector const& a)->double { return a.mag2(); }, jlcxx::arg("this"));
    t.method("mag2", [](CLHEP::Hep2Vector const* a)->double { return a->mag2(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::mag() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::mag()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:89:17
    t.method("mag", [](CLHEP::Hep2Vector const& a)->double { return a.mag(); }, jlcxx::arg("this"));
    t.method("mag", [](CLHEP::Hep2Vector const* a)->double { return a->mag(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::r() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::r()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:92:17
    t.method("r", [](CLHEP::Hep2Vector const& a)->double { return a.r(); }, jlcxx::arg("this"));
    t.method("r", [](CLHEP::Hep2Vector const* a)->double { return a->r(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setPhi(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setPhi(double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:95:15
    t.method("setPhi", [](CLHEP::Hep2Vector& a, double arg0)->void { a.setPhi(arg0); }, jlcxx::arg("this"), jlcxx::arg("phi"));
    t.method("setPhi", [](CLHEP::Hep2Vector* a, double arg0)->void { a->setPhi(arg0); }, jlcxx::arg("this"), jlcxx::arg("phi"));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setMag(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setMag(double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:98:15
    t.method("setMag", [](CLHEP::Hep2Vector& a, double arg0)->void { a.setMag(arg0); }, jlcxx::arg("this"), jlcxx::arg("r"));
    t.method("setMag", [](CLHEP::Hep2Vector* a, double arg0)->void { a->setMag(arg0); }, jlcxx::arg("this"), jlcxx::arg("r"));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setR(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setR(double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:101:15
    t.method("setR", [](CLHEP::Hep2Vector& a, double arg0)->void { a.setR(arg0); }, jlcxx::arg("this"), jlcxx::arg("r"));
    t.method("setR", [](CLHEP::Hep2Vector* a, double arg0)->void { a->setR(arg0); }, jlcxx::arg("this"), jlcxx::arg("r"));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::setPolar(double, double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::setPolar(double, double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:104:15
    t.method("setPolar", [](CLHEP::Hep2Vector& a, double arg0, double arg1)->void { a.setPolar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("r"), jlcxx::arg("phi"));
    t.method("setPolar", [](CLHEP::Hep2Vector* a, double arg0, double arg1)->void { a->setPolar(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("r"), jlcxx::arg("phi"));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:107:23
    t.method("assign", [](CLHEP::Hep2Vector& a, const CLHEP::Hep2Vector & arg0)->CLHEP::Hep2Vector & { return a.operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("assign", [](CLHEP::Hep2Vector* a, const CLHEP::Hep2Vector & arg0)->CLHEP::Hep2Vector & { return a->operator=(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));

    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator==(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator==(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:111:15
    t.method("==", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.operator==(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));
    t.method("==", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->operator==(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator!=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator!=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:112:15
    t.method("!=", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.operator!=(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));
    t.method("!=", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->operator!=(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for int CLHEP::Hep2Vector::compare(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: int CLHEP::Hep2Vector::compare(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:115:7
    t.method("compare", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->int { return a.compare(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));
    t.method("compare", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->int { return a->compare(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator>(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator>(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:116:8
    t.method(">", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.operator>(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));
    t.method(">", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->operator>(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator<(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator<(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:117:8
    t.method("<", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.operator<(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));
    t.method("<", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->operator<(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator>=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator>=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:118:8
    t.method(">=", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.operator>=(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));
    t.method(">=", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->operator>=(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::operator<=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::operator<=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:119:8
    t.method("<=", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.operator<=(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));
    t.method("<=", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->operator<=(arg0); }, jlcxx::arg("this"), jlcxx::arg("v"));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::getTolerance() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::getTolerance()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:122:24
    module_.method("CLHEP!Hep2Vector!getTolerance", []()->double { return CLHEP::Hep2Vector::getTolerance(); });

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::setTolerance(double) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::setTolerance(double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:123:17
    module_.method("CLHEP!Hep2Vector!setTolerance", [](double arg0)->double { return CLHEP::Hep2Vector::setTolerance(arg0); }, jlcxx::arg("tol"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::howNear(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::howNear(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:125:10
    t.method("howNear", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->double { return a.howNear(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("howNear", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->double { return a->howNear(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::isNear(const CLHEP::Hep2Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::isNear(const CLHEP::Hep2Vector &, double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:126:8
    t.method("isNear", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.isNear(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("isNear", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0, double arg1)->bool { return a.isNear(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("p"), jlcxx::arg("epsilon"));
    t.method("isNear", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->isNear(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("isNear", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0, double arg1)->bool { return a->isNear(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("p"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::howParallel(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::howParallel(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:128:10
    t.method("howParallel", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->double { return a.howParallel(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("howParallel", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->double { return a->howParallel(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::isParallel(const CLHEP::Hep2Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::isParallel(const CLHEP::Hep2Vector &, double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:129:8
    t.method("isParallel", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.isParallel(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("isParallel", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0, double arg1)->bool { return a.isParallel(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("p"), jlcxx::arg("epsilon"));
    t.method("isParallel", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->isParallel(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("isParallel", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0, double arg1)->bool { return a->isParallel(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("p"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::howOrthogonal(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::howOrthogonal(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:132:10
    t.method("howOrthogonal", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->double { return a.howOrthogonal(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("howOrthogonal", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->double { return a->howOrthogonal(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));

    DEBUG_MSG("Adding wrapper for bool CLHEP::Hep2Vector::isOrthogonal(const CLHEP::Hep2Vector &, double) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::Hep2Vector::isOrthogonal(const CLHEP::Hep2Vector &, double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:133:8
    t.method("isOrthogonal", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->bool { return a.isOrthogonal(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("isOrthogonal", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0, double arg1)->bool { return a.isOrthogonal(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("p"), jlcxx::arg("epsilon"));
    t.method("isOrthogonal", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->bool { return a->isOrthogonal(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("isOrthogonal", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0, double arg1)->bool { return a->isOrthogonal(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("p"), jlcxx::arg("epsilon"));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator+=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator+=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:136:23
    t.method("add!", [](CLHEP::Hep2Vector& a, const CLHEP::Hep2Vector & arg0)->CLHEP::Hep2Vector & { return a.operator+=(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("add!", [](CLHEP::Hep2Vector* a, const CLHEP::Hep2Vector & arg0)->CLHEP::Hep2Vector & { return a->operator+=(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator-=(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator-=(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:139:23
    t.method("sub!", [](CLHEP::Hep2Vector& a, const CLHEP::Hep2Vector & arg0)->CLHEP::Hep2Vector & { return a.operator-=(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("sub!", [](CLHEP::Hep2Vector* a, const CLHEP::Hep2Vector & arg0)->CLHEP::Hep2Vector & { return a->operator-=(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector CLHEP::Hep2Vector::operator-() (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector CLHEP::Hep2Vector::operator-()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:142:21
    t.method("-", [](CLHEP::Hep2Vector const& a)->CLHEP::Hep2Vector { return a.operator-(); }, jlcxx::arg("this"));
    t.method("-", [](CLHEP::Hep2Vector const* a)->CLHEP::Hep2Vector { return a->operator-(); }, jlcxx::arg("this"));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator*=(double) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector & CLHEP::Hep2Vector::operator*=(double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:145:23
    t.method("mult!", [](CLHEP::Hep2Vector& a, double arg0)->CLHEP::Hep2Vector & { return a.operator*=(arg0); }, jlcxx::arg("this"), jlcxx::arg("a"));
    t.method("mult!", [](CLHEP::Hep2Vector* a, double arg0)->CLHEP::Hep2Vector & { return a->operator*=(arg0); }, jlcxx::arg("this"), jlcxx::arg("a"));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector CLHEP::Hep2Vector::unit() (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector CLHEP::Hep2Vector::unit()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:148:21
    t.method("unit", [](CLHEP::Hep2Vector const& a)->CLHEP::Hep2Vector { return a.unit(); }, jlcxx::arg("this"));
    t.method("unit", [](CLHEP::Hep2Vector const* a)->CLHEP::Hep2Vector { return a->unit(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for CLHEP::Hep2Vector CLHEP::Hep2Vector::orthogonal() (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::Hep2Vector CLHEP::Hep2Vector::orthogonal()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:151:21
    t.method("orthogonal", [](CLHEP::Hep2Vector const& a)->CLHEP::Hep2Vector { return a.orthogonal(); }, jlcxx::arg("this"));
    t.method("orthogonal", [](CLHEP::Hep2Vector const* a)->CLHEP::Hep2Vector { return a->orthogonal(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::dot(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::dot(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:154:17
    t.method("dot", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->double { return a.dot(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));
    t.method("dot", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->double { return a->dot(arg0); }, jlcxx::arg("this"), jlcxx::arg("p"));

    DEBUG_MSG("Adding wrapper for double CLHEP::Hep2Vector::angle(const CLHEP::Hep2Vector &) (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::Hep2Vector::angle(const CLHEP::Hep2Vector &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:157:17
    t.method("angle", [](CLHEP::Hep2Vector const& a, const CLHEP::Hep2Vector & arg0)->double { return a.angle(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("angle", [](CLHEP::Hep2Vector const* a, const CLHEP::Hep2Vector & arg0)->double { return a->angle(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));

    DEBUG_MSG("Adding wrapper for void CLHEP::Hep2Vector::rotate(double) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::Hep2Vector::rotate(double)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/TwoVector.h:160:8
    t.method("rotate", [](CLHEP::Hep2Vector& a, double arg0)->void { a.rotate(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
    t.method("rotate", [](CLHEP::Hep2Vector* a, double arg0)->void { a->rotate(arg0); }, jlcxx::arg("this"), jlcxx::arg("arg0"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<CLHEP::Hep2Vector>> type_;
};
std::shared_ptr<Wrapper> newJlCLHEP_Hep2Vector(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlCLHEP_Hep2Vector(module));
}

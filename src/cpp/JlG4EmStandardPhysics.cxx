// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4EmStandardPhysics> : std::false_type { };
  template<> struct DefaultConstructible<G4EmStandardPhysics> : std::false_type { };
template<> struct SuperType<G4EmStandardPhysics> { typedef G4VPhysicsConstructor type; };
}

// Class generating the wrapper for type G4EmStandardPhysics
// signature to use in the veto file: G4EmStandardPhysics
struct JlG4EmStandardPhysics: public Wrapper {

  JlG4EmStandardPhysics(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4EmStandardPhysics (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4EmStandardPhysics.hh:51:7
    jlcxx::TypeWrapper<G4EmStandardPhysics>  t = jlModule.add_type<G4EmStandardPhysics>("G4EmStandardPhysics",
      jlcxx::julia_base_type<G4VPhysicsConstructor>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4EmStandardPhysics>>(new jlcxx::TypeWrapper<G4EmStandardPhysics>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void G4EmStandardPhysics::G4EmStandardPhysics(G4int, const G4String &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4EmStandardPhysics.hh:55:12
    t.constructor<G4int>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("ver")    );
    t.constructor<G4int, const G4String &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("ver"), jlcxx::arg("name")    );

    DEBUG_MSG("Adding wrapper for void G4EmStandardPhysics::ConstructParticle() (" __HERE__ ")");
    // signature to use in the veto list: void G4EmStandardPhysics::ConstructParticle()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4EmStandardPhysics.hh:59:8
    t.method("ConstructParticle", [](G4EmStandardPhysics& a)->void { a.ConstructParticle(); }, jlcxx::arg("this"));
    t.method("ConstructParticle", [](G4EmStandardPhysics* a)->void { a->ConstructParticle(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void G4EmStandardPhysics::ConstructProcess() (" __HERE__ ")");
    // signature to use in the veto list: void G4EmStandardPhysics::ConstructProcess()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4EmStandardPhysics.hh:60:8
    t.method("ConstructProcess", [](G4EmStandardPhysics& a)->void { a.ConstructProcess(); }, jlcxx::arg("this"));
    t.method("ConstructProcess", [](G4EmStandardPhysics* a)->void { a->ConstructProcess(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4EmStandardPhysics>> type_;
};
std::shared_ptr<Wrapper> newJlG4EmStandardPhysics(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4EmStandardPhysics(module));
}

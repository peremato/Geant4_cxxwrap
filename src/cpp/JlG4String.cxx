// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4String> : std::false_type { };
  template<> struct DefaultConstructible<G4String> : std::false_type { };
template<> struct SuperType<G4String> { typedef std::string type; };
}

// Class generating the wrapper for type G4String
// signature to use in the veto file: G4String
struct JlG4String: public Wrapper {

  JlG4String(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4String (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4String.hh:61:7
    jlcxx::TypeWrapper<G4String>  t = jlModule.add_type<G4String>("G4String",
      jlcxx::julia_base_type<std::string>());
    jlcxx::stl::apply_stl<G4String>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4String>>(new jlcxx::TypeWrapper<G4String>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4String>> type_;
};
std::shared_ptr<Wrapper> newJlG4String(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4String(module));
}

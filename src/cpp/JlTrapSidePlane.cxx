// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<TrapSidePlane> : std::false_type { };
  template<> struct DefaultConstructible<TrapSidePlane> : std::false_type { };
}

// Class generating the wrapper for type TrapSidePlane
// signature to use in the veto file: TrapSidePlane
struct JlTrapSidePlane: public Wrapper {

  JlTrapSidePlane(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type TrapSidePlane (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:90:8
    jlcxx::TypeWrapper<TrapSidePlane>  t = jlModule.add_type<TrapSidePlane>("TrapSidePlane");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<TrapSidePlane>>(new jlcxx::TypeWrapper<TrapSidePlane>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding a methods  to provide read access to the field a (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:92:14
    // signature to use in the veto list: TrapSidePlane::a
    t.method("a", [](const TrapSidePlane& a) -> G4double { return a.a; });
    t.method("a", [](TrapSidePlane& a) -> G4double { return a.a; });
    t.method("a", [](const TrapSidePlane* a) -> G4double { return a->a; });
    t.method("a", [](TrapSidePlane* a) -> G4double { return a->a; });
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:92:14
    // signature to use in the veto list: TrapSidePlane::a
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding a! methods to provide write access to the field a (" __HERE__ ")");
    t.method("a!", [](TrapSidePlane& a, G4double val) -> G4double { return a.a = val; });

    DEBUG_MSG("Adding a! methods to provide write access to the field a (" __HERE__ ")");
    t.method("a!", [](TrapSidePlane* a, G4double val) -> G4double { return a->a = val; });

    DEBUG_MSG("Adding b methods  to provide read access to the field b (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:92:16
    // signature to use in the veto list: TrapSidePlane::b
    t.method("b", [](const TrapSidePlane& a) -> G4double { return a.b; });
    t.method("b", [](TrapSidePlane& a) -> G4double { return a.b; });
    t.method("b", [](const TrapSidePlane* a) -> G4double { return a->b; });
    t.method("b", [](TrapSidePlane* a) -> G4double { return a->b; });
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:92:16
    // signature to use in the veto list: TrapSidePlane::b
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding b! methods to provide write access to the field b (" __HERE__ ")");
    t.method("b!", [](TrapSidePlane& a, G4double val) -> G4double { return a.b = val; });

    DEBUG_MSG("Adding b! methods to provide write access to the field b (" __HERE__ ")");
    t.method("b!", [](TrapSidePlane* a, G4double val) -> G4double { return a->b = val; });

    DEBUG_MSG("Adding c methods  to provide read access to the field c (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:92:18
    // signature to use in the veto list: TrapSidePlane::c
    t.method("c", [](const TrapSidePlane& a) -> G4double { return a.c; });
    t.method("c", [](TrapSidePlane& a) -> G4double { return a.c; });
    t.method("c", [](const TrapSidePlane* a) -> G4double { return a->c; });
    t.method("c", [](TrapSidePlane* a) -> G4double { return a->c; });
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:92:18
    // signature to use in the veto list: TrapSidePlane::c
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding c! methods to provide write access to the field c (" __HERE__ ")");
    t.method("c!", [](TrapSidePlane& a, G4double val) -> G4double { return a.c = val; });

    DEBUG_MSG("Adding c! methods to provide write access to the field c (" __HERE__ ")");
    t.method("c!", [](TrapSidePlane* a, G4double val) -> G4double { return a->c = val; });

    DEBUG_MSG("Adding d methods  to provide read access to the field d (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:92:20
    // signature to use in the veto list: TrapSidePlane::d
    t.method("d", [](const TrapSidePlane& a) -> G4double { return a.d; });
    t.method("d", [](TrapSidePlane& a) -> G4double { return a.d; });
    t.method("d", [](const TrapSidePlane* a) -> G4double { return a->d; });
    t.method("d", [](TrapSidePlane* a) -> G4double { return a->d; });
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Trap.hh:92:20
    // signature to use in the veto list: TrapSidePlane::d
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding d! methods to provide write access to the field d (" __HERE__ ")");
    t.method("d!", [](TrapSidePlane& a, G4double val) -> G4double { return a.d = val; });

    DEBUG_MSG("Adding d! methods to provide write access to the field d (" __HERE__ ")");
    t.method("d!", [](TrapSidePlane* a, G4double val) -> G4double { return a->d = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<TrapSidePlane>> type_;
};
std::shared_ptr<Wrapper> newJlTrapSidePlane(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlTrapSidePlane(module));
}

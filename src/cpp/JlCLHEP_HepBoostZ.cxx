// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<CLHEP::HepBoostZ> : std::false_type { };
  template<> struct DefaultConstructible<CLHEP::HepBoostZ> : std::false_type { };
}

// Class generating the wrapper for type CLHEP::HepBoostZ
// signature to use in the veto file: CLHEP::HepBoostZ
struct JlCLHEP_HepBoostZ: public Wrapper {

  JlCLHEP_HepBoostZ(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type CLHEP::HepBoostZ (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/CLHEP/Vector/BoostZ.h:37:7
    jlcxx::TypeWrapper<CLHEP::HepBoostZ>  t = jlModule.add_type<CLHEP::HepBoostZ>("CLHEP!HepBoostZ");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<CLHEP::HepBoostZ>>(new jlcxx::TypeWrapper<CLHEP::HepBoostZ>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<CLHEP::HepBoostZ>> type_;
};
std::shared_ptr<Wrapper> newJlCLHEP_HepBoostZ(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlCLHEP_HepBoostZ(module));
}

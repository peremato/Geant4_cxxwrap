// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4MTRunManagerKernel> : std::false_type { };
  template<> struct DefaultConstructible<G4MTRunManagerKernel> : std::false_type { };
template<> struct SuperType<G4MTRunManagerKernel> { typedef G4RunManagerKernel type; };
}

// Class generating the wrapper for type G4MTRunManagerKernel
// signature to use in the veto file: G4MTRunManagerKernel
struct JlG4MTRunManagerKernel: public Wrapper {

  JlG4MTRunManagerKernel(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4MTRunManagerKernel (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4MTRunManagerKernel.hh:66:7
    jlcxx::TypeWrapper<G4MTRunManagerKernel>  t = jlModule.add_type<G4MTRunManagerKernel>("G4MTRunManagerKernel",
      jlcxx::julia_base_type<G4RunManagerKernel>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4MTRunManagerKernel>>(new jlcxx::TypeWrapper<G4MTRunManagerKernel>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void G4MTRunManagerKernel::SetUpDecayChannels() (" __HERE__ ")");
    // signature to use in the veto list: void G4MTRunManagerKernel::SetUpDecayChannels()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4MTRunManagerKernel.hh:81:10
    t.method("SetUpDecayChannels", static_cast<void (G4MTRunManagerKernel::*)() >(&G4MTRunManagerKernel::SetUpDecayChannels));

    DEBUG_MSG("Adding wrapper for void G4MTRunManagerKernel::BroadcastAbortRun(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4MTRunManagerKernel::BroadcastAbortRun(G4bool)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4MTRunManagerKernel.hh:84:10
    t.method("BroadcastAbortRun", static_cast<void (G4MTRunManagerKernel::*)(G4bool) >(&G4MTRunManagerKernel::BroadcastAbortRun));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4MTRunManagerKernel>> type_;
};
std::shared_ptr<Wrapper> newJlG4MTRunManagerKernel(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4MTRunManagerKernel(module));
}

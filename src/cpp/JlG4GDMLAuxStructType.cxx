// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4GDMLAuxStructType> : std::false_type { };
  template<> struct DefaultConstructible<G4GDMLAuxStructType> : std::false_type { };
}

// Class generating the wrapper for type G4GDMLAuxStructType
// signature to use in the veto file: G4GDMLAuxStructType
struct JlG4GDMLAuxStructType: public Wrapper {

  JlG4GDMLAuxStructType(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4GDMLAuxStructType (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:36:8
    jlcxx::TypeWrapper<G4GDMLAuxStructType>  t = jlModule.add_type<G4GDMLAuxStructType>("G4GDMLAuxStructType");
    jlcxx::stl::apply_stl<G4GDMLAuxStructType>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4GDMLAuxStructType>>(new jlcxx::TypeWrapper<G4GDMLAuxStructType>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding type methods  to provide read access to the field type (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:38:12
    // signature to use in the veto list: G4GDMLAuxStructType::type
    t.method("type", [](const G4GDMLAuxStructType& a) -> const G4String& { return a.type; });
    t.method("type", [](G4GDMLAuxStructType& a) -> G4String& { return a.type; });
    t.method("type", [](const G4GDMLAuxStructType* a) -> const G4String& { return a->type; });
    t.method("type", [](G4GDMLAuxStructType* a) -> G4String& { return a->type; });
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:38:12
    // signature to use in the veto list: G4GDMLAuxStructType::type
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding type! methods to provide write access to the field type (" __HERE__ ")");
    t.method("type!", [](G4GDMLAuxStructType& a, const G4String& val) -> G4String& { return a.type = val; });

    DEBUG_MSG("Adding type! methods to provide write access to the field type (" __HERE__ ")");
    t.method("type!", [](G4GDMLAuxStructType* a, const G4String& val) -> G4String& { return a->type = val; });

    DEBUG_MSG("Adding value methods  to provide read access to the field value (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:39:12
    // signature to use in the veto list: G4GDMLAuxStructType::value
    t.method("value", [](const G4GDMLAuxStructType& a) -> const G4String& { return a.value; });
    t.method("value", [](G4GDMLAuxStructType& a) -> G4String& { return a.value; });
    t.method("value", [](const G4GDMLAuxStructType* a) -> const G4String& { return a->value; });
    t.method("value", [](G4GDMLAuxStructType* a) -> G4String& { return a->value; });
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:39:12
    // signature to use in the veto list: G4GDMLAuxStructType::value
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding value! methods to provide write access to the field value (" __HERE__ ")");
    t.method("value!", [](G4GDMLAuxStructType& a, const G4String& val) -> G4String& { return a.value = val; });

    DEBUG_MSG("Adding value! methods to provide write access to the field value (" __HERE__ ")");
    t.method("value!", [](G4GDMLAuxStructType* a, const G4String& val) -> G4String& { return a->value = val; });

    DEBUG_MSG("Adding unit methods  to provide read access to the field unit (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:40:12
    // signature to use in the veto list: G4GDMLAuxStructType::unit
    t.method("unit", [](const G4GDMLAuxStructType& a) -> const G4String& { return a.unit; });
    t.method("unit", [](G4GDMLAuxStructType& a) -> G4String& { return a.unit; });
    t.method("unit", [](const G4GDMLAuxStructType* a) -> const G4String& { return a->unit; });
    t.method("unit", [](G4GDMLAuxStructType* a) -> G4String& { return a->unit; });
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:40:12
    // signature to use in the veto list: G4GDMLAuxStructType::unit
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding unit! methods to provide write access to the field unit (" __HERE__ ")");
    t.method("unit!", [](G4GDMLAuxStructType& a, const G4String& val) -> G4String& { return a.unit = val; });

    DEBUG_MSG("Adding unit! methods to provide write access to the field unit (" __HERE__ ")");
    t.method("unit!", [](G4GDMLAuxStructType* a, const G4String& val) -> G4String& { return a->unit = val; });

    DEBUG_MSG("Adding auxList methods  to provide read access to the field auxList (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:41:37
    // signature to use in the veto list: G4GDMLAuxStructType::auxList
    t.method("auxList", [](const G4GDMLAuxStructType& a) -> std::vector<G4GDMLAuxStructType> * { return a.auxList; });
    t.method("auxList", [](G4GDMLAuxStructType& a) -> std::vector<G4GDMLAuxStructType> * { return a.auxList; });
    t.method("auxList", [](const G4GDMLAuxStructType* a) -> std::vector<G4GDMLAuxStructType> * { return a->auxList; });
    t.method("auxList", [](G4GDMLAuxStructType* a) -> std::vector<G4GDMLAuxStructType> * { return a->auxList; });
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4GDMLAuxStructType.hh:41:37
    // signature to use in the veto list: G4GDMLAuxStructType::auxList
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding auxList! methods to provide write access to the field auxList (" __HERE__ ")");
    t.method("auxList!", [](G4GDMLAuxStructType& a, std::vector<G4GDMLAuxStructType> * val) -> std::vector<G4GDMLAuxStructType> * { return a.auxList = val; });

    DEBUG_MSG("Adding auxList! methods to provide write access to the field auxList (" __HERE__ ")");
    t.method("auxList!", [](G4GDMLAuxStructType* a, std::vector<G4GDMLAuxStructType> * val) -> std::vector<G4GDMLAuxStructType> * { return a->auxList = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4GDMLAuxStructType>> type_;
};
std::shared_ptr<Wrapper> newJlG4GDMLAuxStructType(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4GDMLAuxStructType(module));
}

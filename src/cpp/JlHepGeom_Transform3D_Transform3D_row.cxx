// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<HepGeom::Transform3D::Transform3D_row> : std::false_type { };
  template<> struct DefaultConstructible<HepGeom::Transform3D::Transform3D_row> : std::false_type { };
}

// Class generating the wrapper for type HepGeom::Transform3D::Transform3D_row
// signature to use in the veto file: HepGeom::Transform3D::Transform3D_row
struct JlHepGeom_Transform3D_Transform3D_row: public Wrapper {

  JlHepGeom_Transform3D_Transform3D_row(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepGeom::Transform3D::Transform3D_row (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Geometry/Transform3D.h:199:11
    jlcxx::TypeWrapper<HepGeom::Transform3D::Transform3D_row>  t = jlModule.add_type<HepGeom::Transform3D::Transform3D_row>("HepGeom!Transform3D!Transform3D_row");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<HepGeom::Transform3D::Transform3D_row>>(new jlcxx::TypeWrapper<HepGeom::Transform3D::Transform3D_row>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void HepGeom::Transform3D::Transform3D_row::Transform3D_row(const HepGeom::Transform3D &, int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Geometry/Transform3D.h:201:14
    t.constructor<const HepGeom::Transform3D &, int>(/*finalize=*/jlcxx::finalize_policy::yes);
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding getindex method to wrap double HepGeom::Transform3D::Transform3D_row::operator[](int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Geometry/Transform3D.h:202:21
    t.method("getindex",
      [](HepGeom::Transform3D::Transform3D_row& a, int i){
      return a[i];
    });

    module_.unset_override_module();
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<HepGeom::Transform3D::Transform3D_row>> type_;
};
std::shared_ptr<Wrapper> newJlHepGeom_Transform3D_Transform3D_row(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepGeom_Transform3D_Transform3D_row(module));
}

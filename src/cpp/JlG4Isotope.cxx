// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4Isotope> : std::false_type { };
  template<> struct DefaultConstructible<G4Isotope> : std::false_type { };
}

// Class generating the wrapper for type G4Isotope
// signature to use in the veto file: G4Isotope
struct JlG4Isotope: public Wrapper {

  JlG4Isotope(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4Isotope (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:61:7
    jlcxx::TypeWrapper<G4Isotope>  t = jlModule.add_type<G4Isotope>("G4Isotope");
    jlcxx::stl::apply_stl<G4Isotope*>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4Isotope>>(new jlcxx::TypeWrapper<G4Isotope>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4Isotope::G4Isotope(const G4String &, G4int, G4int, G4double, G4int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:65:3
    t.constructor<const G4String &, G4int, G4int>(/*finalize=*/jlcxx::finalize_policy::no);
    t.constructor<const G4String &, G4int, G4int, G4double>(/*finalize=*/jlcxx::finalize_policy::no);
    t.constructor<const G4String &, G4int, G4int, G4double, G4int>(/*finalize=*/jlcxx::finalize_policy::no);

    DEBUG_MSG("Adding wrapper for const G4String & G4Isotope::GetName() (" __HERE__ ")");
    // signature to use in the veto list: const G4String & G4Isotope::GetName()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:77:19
    t.method("GetName", static_cast<const G4String & (G4Isotope::*)()  const>(&G4Isotope::GetName));

    DEBUG_MSG("Adding wrapper for G4int G4Isotope::GetZ() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4Isotope::GetZ()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:80:9
    t.method("GetZ", static_cast<G4int (G4Isotope::*)()  const>(&G4Isotope::GetZ));

    DEBUG_MSG("Adding wrapper for G4int G4Isotope::GetN() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4Isotope::GetN()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:83:9
    t.method("GetN", static_cast<G4int (G4Isotope::*)()  const>(&G4Isotope::GetN));

    DEBUG_MSG("Adding wrapper for G4double G4Isotope::GetA() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Isotope::GetA()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:86:12
    t.method("GetA", static_cast<G4double (G4Isotope::*)()  const>(&G4Isotope::GetA));

    DEBUG_MSG("Adding wrapper for G4int G4Isotope::Getm() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4Isotope::Getm()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:89:9
    t.method("Getm", static_cast<G4int (G4Isotope::*)()  const>(&G4Isotope::Getm));

    DEBUG_MSG("Adding wrapper for G4Isotope * G4Isotope::GetIsotope(const G4String &, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4Isotope * G4Isotope::GetIsotope(const G4String &, G4bool)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:91:21
    module_.method("G4Isotope!GetIsotope", static_cast<G4Isotope * (*)(const G4String &, G4bool) >(&G4Isotope::GetIsotope));
    module_.method("G4Isotope!GetIsotope", [](const G4String & arg0)->G4Isotope * { return G4Isotope::GetIsotope(arg0); });

    DEBUG_MSG("Adding wrapper for const G4IsotopeTable * G4Isotope::GetIsotopeTable() (" __HERE__ ")");
    // signature to use in the veto list: const G4IsotopeTable * G4Isotope::GetIsotopeTable()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:93:32
    module_.method("G4Isotope!GetIsotopeTable", static_cast<const G4IsotopeTable * (*)() >(&G4Isotope::GetIsotopeTable));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for G4bool G4Isotope::operator==(const G4Isotope &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4Isotope::operator==(const G4Isotope &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:105:10
    t.method("==", static_cast<G4bool (G4Isotope::*)(const G4Isotope &)  const>(&G4Isotope::operator==));

    DEBUG_MSG("Adding wrapper for G4bool G4Isotope::operator!=(const G4Isotope &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4Isotope::operator!=(const G4Isotope &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:106:10
    t.method("!=", static_cast<G4bool (G4Isotope::*)(const G4Isotope &)  const>(&G4Isotope::operator!=));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for void G4Isotope::SetName(const G4String &) (" __HERE__ ")");
    // signature to use in the veto list: void G4Isotope::SetName(const G4String &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Isotope.hh:108:8
    t.method("SetName", static_cast<void (G4Isotope::*)(const G4String &) >(&G4Isotope::SetName));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4Isotope>> type_;
};
std::shared_ptr<Wrapper> newJlG4Isotope(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4Isotope(module));
}

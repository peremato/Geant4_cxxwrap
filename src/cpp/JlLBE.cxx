// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<LBE> : std::false_type { };
  template<> struct DefaultConstructible<LBE> : std::false_type { };
template<> struct SuperType<LBE> { typedef G4VModularPhysicsList type; };
}

// Class generating the wrapper for type LBE
// signature to use in the veto file: LBE
struct JlLBE: public Wrapper {

  JlLBE(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type LBE (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/LBE.hh:58:7
    jlcxx::TypeWrapper<LBE>  t = jlModule.add_type<LBE>("LBE",
      jlcxx::julia_base_type<G4VModularPhysicsList>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<LBE>>(new jlcxx::TypeWrapper<LBE>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void LBE::LBE(G4int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/LBE.hh:61:3
    t.constructor<G4int>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void LBE::SetCuts() (" __HERE__ ")");
    // signature to use in the veto list: void LBE::SetCuts()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/LBE.hh:69:16
    t.method("SetCuts", static_cast<void (LBE::*)() >(&LBE::SetCuts));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<LBE>> type_;
};
std::shared_ptr<Wrapper> newJlLBE(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlLBE(module));
}

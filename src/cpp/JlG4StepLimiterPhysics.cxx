// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4StepLimiterPhysics> : std::false_type { };
  template<> struct DefaultConstructible<G4StepLimiterPhysics> : std::false_type { };
template<> struct SuperType<G4StepLimiterPhysics> { typedef G4VPhysicsConstructor type; };
}

// Class generating the wrapper for type G4StepLimiterPhysics
// signature to use in the veto file: G4StepLimiterPhysics
struct JlG4StepLimiterPhysics: public Wrapper {

  JlG4StepLimiterPhysics(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4StepLimiterPhysics (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4StepLimiterPhysics.hh:42:7
    jlcxx::TypeWrapper<G4StepLimiterPhysics>  t = jlModule.add_type<G4StepLimiterPhysics>("G4StepLimiterPhysics",
      jlcxx::julia_base_type<G4VPhysicsConstructor>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4StepLimiterPhysics>>(new jlcxx::TypeWrapper<G4StepLimiterPhysics>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void G4StepLimiterPhysics::G4StepLimiterPhysics(const G4String &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4StepLimiterPhysics.hh:46:3
    t.constructor<const G4String &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void G4StepLimiterPhysics::ConstructParticle() (" __HERE__ ")");
    // signature to use in the veto list: void G4StepLimiterPhysics::ConstructParticle()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4StepLimiterPhysics.hh:52:16
    t.method("ConstructParticle", static_cast<void (G4StepLimiterPhysics::*)() >(&G4StepLimiterPhysics::ConstructParticle));

    DEBUG_MSG("Adding wrapper for void G4StepLimiterPhysics::ConstructProcess() (" __HERE__ ")");
    // signature to use in the veto list: void G4StepLimiterPhysics::ConstructProcess()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4StepLimiterPhysics.hh:57:16
    t.method("ConstructProcess", static_cast<void (G4StepLimiterPhysics::*)() >(&G4StepLimiterPhysics::ConstructProcess));

    DEBUG_MSG("Adding wrapper for void G4StepLimiterPhysics::SetApplyToAll(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4StepLimiterPhysics::SetApplyToAll(G4bool)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4StepLimiterPhysics.hh:61:10
    t.method("SetApplyToAll", static_cast<void (G4StepLimiterPhysics::*)(G4bool) >(&G4StepLimiterPhysics::SetApplyToAll));

    DEBUG_MSG("Adding wrapper for G4bool G4StepLimiterPhysics::GetApplyToAll() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4StepLimiterPhysics::GetApplyToAll()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4StepLimiterPhysics.hh:62:10
    t.method("GetApplyToAll", static_cast<G4bool (G4StepLimiterPhysics::*)()  const>(&G4StepLimiterPhysics::GetApplyToAll));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4StepLimiterPhysics>> type_;
};
std::shared_ptr<Wrapper> newJlG4StepLimiterPhysics(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4StepLimiterPhysics(module));
}

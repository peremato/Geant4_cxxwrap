// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4ExtrudedSolid::ZSection> : std::false_type { };
  template<> struct DefaultConstructible<G4ExtrudedSolid::ZSection> : std::false_type { };
}

// Class generating the wrapper for type G4ExtrudedSolid::ZSection
// signature to use in the veto file: G4ExtrudedSolid::ZSection
struct JlG4ExtrudedSolid_ZSection: public Wrapper {

  JlG4ExtrudedSolid_ZSection(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4ExtrudedSolid::ZSection (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4ExtrudedSolid.hh:76:12
    jlcxx::TypeWrapper<G4ExtrudedSolid::ZSection>  t = jlModule.add_type<G4ExtrudedSolid::ZSection>("G4ExtrudedSolid!ZSection");
    jlcxx::stl::apply_stl<G4ExtrudedSolid::ZSection>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4ExtrudedSolid::ZSection>>(new jlcxx::TypeWrapper<G4ExtrudedSolid::ZSection>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void G4ExtrudedSolid::ZSection::ZSection(G4double, const G4TwoVector &, G4double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4ExtrudedSolid.hh:79:7
    t.constructor<G4double, const G4TwoVector &, G4double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding fZ methods  to provide read access to the field fZ (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4ExtrudedSolid.hh:82:19
    // signature to use in the veto list: G4ExtrudedSolid::ZSection::fZ
    t.method("fZ", [](const G4ExtrudedSolid::ZSection& a) -> G4double { return a.fZ; });
    t.method("fZ", [](G4ExtrudedSolid::ZSection& a) -> G4double { return a.fZ; });
    t.method("fZ", [](const G4ExtrudedSolid::ZSection* a) -> G4double { return a->fZ; });
    t.method("fZ", [](G4ExtrudedSolid::ZSection* a) -> G4double { return a->fZ; });
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4ExtrudedSolid.hh:82:19
    // signature to use in the veto list: G4ExtrudedSolid::ZSection::fZ
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fZ! methods to provide write access to the field fZ (" __HERE__ ")");
    t.method("fZ!", [](G4ExtrudedSolid::ZSection& a, G4double val) -> G4double { return a.fZ = val; });

    DEBUG_MSG("Adding fZ! methods to provide write access to the field fZ (" __HERE__ ")");
    t.method("fZ!", [](G4ExtrudedSolid::ZSection* a, G4double val) -> G4double { return a->fZ = val; });

    DEBUG_MSG("Adding fOffset methods  to provide read access to the field fOffset (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4ExtrudedSolid.hh:83:19
    // signature to use in the veto list: G4ExtrudedSolid::ZSection::fOffset
    t.method("fOffset", [](const G4ExtrudedSolid::ZSection& a) -> const G4TwoVector& { return a.fOffset; });
    t.method("fOffset", [](G4ExtrudedSolid::ZSection& a) -> G4TwoVector& { return a.fOffset; });
    t.method("fOffset", [](const G4ExtrudedSolid::ZSection* a) -> const G4TwoVector& { return a->fOffset; });
    t.method("fOffset", [](G4ExtrudedSolid::ZSection* a) -> G4TwoVector& { return a->fOffset; });
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4ExtrudedSolid.hh:83:19
    // signature to use in the veto list: G4ExtrudedSolid::ZSection::fOffset
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fOffset! methods to provide write access to the field fOffset (" __HERE__ ")");
    t.method("fOffset!", [](G4ExtrudedSolid::ZSection& a, const G4TwoVector& val) -> G4TwoVector& { return a.fOffset = val; });

    DEBUG_MSG("Adding fOffset! methods to provide write access to the field fOffset (" __HERE__ ")");
    t.method("fOffset!", [](G4ExtrudedSolid::ZSection* a, const G4TwoVector& val) -> G4TwoVector& { return a->fOffset = val; });

    DEBUG_MSG("Adding fScale methods  to provide read access to the field fScale (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4ExtrudedSolid.hh:84:19
    // signature to use in the veto list: G4ExtrudedSolid::ZSection::fScale
    t.method("fScale", [](const G4ExtrudedSolid::ZSection& a) -> G4double { return a.fScale; });
    t.method("fScale", [](G4ExtrudedSolid::ZSection& a) -> G4double { return a.fScale; });
    t.method("fScale", [](const G4ExtrudedSolid::ZSection* a) -> G4double { return a->fScale; });
    t.method("fScale", [](G4ExtrudedSolid::ZSection* a) -> G4double { return a->fScale; });
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4ExtrudedSolid.hh:84:19
    // signature to use in the veto list: G4ExtrudedSolid::ZSection::fScale
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding fScale! methods to provide write access to the field fScale (" __HERE__ ")");
    t.method("fScale!", [](G4ExtrudedSolid::ZSection& a, G4double val) -> G4double { return a.fScale = val; });

    DEBUG_MSG("Adding fScale! methods to provide write access to the field fScale (" __HERE__ ")");
    t.method("fScale!", [](G4ExtrudedSolid::ZSection* a, G4double val) -> G4double { return a->fScale = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4ExtrudedSolid::ZSection>> type_;
};
std::shared_ptr<Wrapper> newJlG4ExtrudedSolid_ZSection(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4ExtrudedSolid_ZSection(module));
}

// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<HepGeom::Reflect3D> : std::false_type { };
  template<> struct DefaultConstructible<HepGeom::Reflect3D> : std::false_type { };
template<> struct SuperType<HepGeom::Reflect3D> { typedef HepGeom::Transform3D type; };
}

// Class generating the wrapper for type HepGeom::Reflect3D
// signature to use in the veto file: HepGeom::Reflect3D
struct JlHepGeom_Reflect3D: public Wrapper {

  JlHepGeom_Reflect3D(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepGeom::Reflect3D (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/CLHEP/Geometry/Transform3D.h:618:9
    jlcxx::TypeWrapper<HepGeom::Reflect3D>  t = jlModule.add_type<HepGeom::Reflect3D>("HepGeom!Reflect3D",
      jlcxx::julia_base_type<HepGeom::Transform3D>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<HepGeom::Reflect3D>>(new jlcxx::TypeWrapper<HepGeom::Reflect3D>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void HepGeom::Reflect3D::Reflect3D(double, double, double, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/CLHEP/Geometry/Transform3D.h:634:5
    t.constructor<double, double, double, double>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void HepGeom::Reflect3D::Reflect3D(const HepGeom::Normal3D<double> &, const HepGeom::Point3D<double> &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/CLHEP/Geometry/Transform3D.h:638:12
    t.constructor<const HepGeom::Normal3D<double> &, const HepGeom::Point3D<double> &>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<HepGeom::Reflect3D>> type_;
};
std::shared_ptr<Wrapper> newJlHepGeom_Reflect3D(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepGeom_Reflect3D(module));
}

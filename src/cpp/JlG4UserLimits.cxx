// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4UserLimits> : std::false_type { };
  template<> struct DefaultConstructible<G4UserLimits> : std::false_type { };
}

// Class generating the wrapper for type G4UserLimits
// signature to use in the veto file: G4UserLimits
struct JlG4UserLimits: public Wrapper {

  JlG4UserLimits(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4UserLimits (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:52:7
    jlcxx::TypeWrapper<G4UserLimits>  t = jlModule.add_type<G4UserLimits>("G4UserLimits");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4UserLimits>>(new jlcxx::TypeWrapper<G4UserLimits>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void G4UserLimits::G4UserLimits(G4double, G4double, G4double, G4double, G4double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:55:3
    t.constructor<G4double>(/*finalize=*/true);
    t.constructor<G4double, G4double>(/*finalize=*/true);
    t.constructor<G4double, G4double, G4double>(/*finalize=*/true);
    t.constructor<G4double, G4double, G4double, G4double>(/*finalize=*/true);
    t.constructor<G4double, G4double, G4double, G4double, G4double>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void G4UserLimits::G4UserLimits(const G4String &, G4double, G4double, G4double, G4double, G4double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:58:3
    t.constructor<const G4String &>(/*finalize=*/true);
    t.constructor<const G4String &, G4double>(/*finalize=*/true);
    t.constructor<const G4String &, G4double, G4double>(/*finalize=*/true);
    t.constructor<const G4String &, G4double, G4double, G4double>(/*finalize=*/true);
    t.constructor<const G4String &, G4double, G4double, G4double, G4double>(/*finalize=*/true);
    t.constructor<const G4String &, G4double, G4double, G4double, G4double, G4double>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for G4double G4UserLimits::GetMaxAllowedStep(const G4Track &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4UserLimits::GetMaxAllowedStep(const G4Track &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:63:20
    t.method("GetMaxAllowedStep", static_cast<G4double (G4UserLimits::*)(const G4Track &) >(&G4UserLimits::GetMaxAllowedStep));

    DEBUG_MSG("Adding wrapper for G4double G4UserLimits::GetUserMaxTrackLength(const G4Track &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4UserLimits::GetUserMaxTrackLength(const G4Track &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:67:20
    t.method("GetUserMaxTrackLength", static_cast<G4double (G4UserLimits::*)(const G4Track &) >(&G4UserLimits::GetUserMaxTrackLength));

    DEBUG_MSG("Adding wrapper for G4double G4UserLimits::GetUserMaxTime(const G4Track &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4UserLimits::GetUserMaxTime(const G4Track &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:68:20
    t.method("GetUserMaxTime", static_cast<G4double (G4UserLimits::*)(const G4Track &) >(&G4UserLimits::GetUserMaxTime));

    DEBUG_MSG("Adding wrapper for G4double G4UserLimits::GetUserMinEkine(const G4Track &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4UserLimits::GetUserMinEkine(const G4Track &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:69:20
    t.method("GetUserMinEkine", static_cast<G4double (G4UserLimits::*)(const G4Track &) >(&G4UserLimits::GetUserMinEkine));

    DEBUG_MSG("Adding wrapper for G4double G4UserLimits::GetUserMinRange(const G4Track &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4UserLimits::GetUserMinRange(const G4Track &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:70:20
    t.method("GetUserMinRange", static_cast<G4double (G4UserLimits::*)(const G4Track &) >(&G4UserLimits::GetUserMinRange));

    DEBUG_MSG("Adding wrapper for void G4UserLimits::SetMaxAllowedStep(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4UserLimits::SetMaxAllowedStep(G4double)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:72:16
    t.method("SetMaxAllowedStep", static_cast<void (G4UserLimits::*)(G4double) >(&G4UserLimits::SetMaxAllowedStep));

    DEBUG_MSG("Adding wrapper for void G4UserLimits::SetUserMaxTrackLength(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4UserLimits::SetUserMaxTrackLength(G4double)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:73:16
    t.method("SetUserMaxTrackLength", static_cast<void (G4UserLimits::*)(G4double) >(&G4UserLimits::SetUserMaxTrackLength));

    DEBUG_MSG("Adding wrapper for void G4UserLimits::SetUserMaxTime(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4UserLimits::SetUserMaxTime(G4double)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:74:16
    t.method("SetUserMaxTime", static_cast<void (G4UserLimits::*)(G4double) >(&G4UserLimits::SetUserMaxTime));

    DEBUG_MSG("Adding wrapper for void G4UserLimits::SetUserMinEkine(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4UserLimits::SetUserMinEkine(G4double)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:75:16
    t.method("SetUserMinEkine", static_cast<void (G4UserLimits::*)(G4double) >(&G4UserLimits::SetUserMinEkine));

    DEBUG_MSG("Adding wrapper for void G4UserLimits::SetUserMinRange(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4UserLimits::SetUserMinRange(G4double)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:76:16
    t.method("SetUserMinRange", static_cast<void (G4UserLimits::*)(G4double) >(&G4UserLimits::SetUserMinRange));

    DEBUG_MSG("Adding wrapper for const G4String & G4UserLimits::GetType() (" __HERE__ ")");
    // signature to use in the veto list: const G4String & G4UserLimits::GetType()
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:78:19
    t.method("GetType", static_cast<const G4String & (G4UserLimits::*)()  const>(&G4UserLimits::GetType));

    DEBUG_MSG("Adding wrapper for void G4UserLimits::SetType(const G4String &) (" __HERE__ ")");
    // signature to use in the veto list: void G4UserLimits::SetType(const G4String &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4UserLimits.hh:79:8
    t.method("SetType", static_cast<void (G4UserLimits::*)(const G4String &) >(&G4UserLimits::SetType));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4UserLimits>> type_;
};
std::shared_ptr<Wrapper> newJlG4UserLimits(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4UserLimits(module));
}

// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4SubtractionSolid> : std::false_type { };
  template<> struct DefaultConstructible<G4SubtractionSolid> : std::false_type { };
template<> struct SuperType<G4SubtractionSolid> { typedef G4BooleanSolid type; };
}

// Class generating the wrapper for type G4SubtractionSolid
// signature to use in the veto file: G4SubtractionSolid
struct JlG4SubtractionSolid: public Wrapper {

  JlG4SubtractionSolid(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4SubtractionSolid (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:46:7
    jlcxx::TypeWrapper<G4SubtractionSolid>  t = jlModule.add_type<G4SubtractionSolid>("G4SubtractionSolid",
      jlcxx::julia_base_type<G4BooleanSolid>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4SubtractionSolid>>(new jlcxx::TypeWrapper<G4SubtractionSolid>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4SubtractionSolid::G4SubtractionSolid(const G4String &, G4VSolid *, G4VSolid *) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:50:5
    t.constructor<const G4String &, G4VSolid *, G4VSolid *>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void G4SubtractionSolid::G4SubtractionSolid(const G4String &, G4VSolid *, G4VSolid *, G4RotationMatrix *, const G4ThreeVector &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:54:5
    t.constructor<const G4String &, G4VSolid *, G4VSolid *, G4RotationMatrix *, const G4ThreeVector &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void G4SubtractionSolid::G4SubtractionSolid(const G4String &, G4VSolid *, G4VSolid *, const G4Transform3D &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:60:5
    t.constructor<const G4String &, G4VSolid *, G4VSolid *, const G4Transform3D &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for G4GeometryType G4SubtractionSolid::GetEntityType() (" __HERE__ ")");
    // signature to use in the veto list: G4GeometryType G4SubtractionSolid::GetEntityType()
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:67:21
    t.method("GetEntityType", static_cast<G4GeometryType (G4SubtractionSolid::*)()  const>(&G4SubtractionSolid::GetEntityType));

    DEBUG_MSG("Adding wrapper for G4VSolid * G4SubtractionSolid::Clone() (" __HERE__ ")");
    // signature to use in the veto list: G4VSolid * G4SubtractionSolid::Clone()
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:69:15
    t.method("Clone", static_cast<G4VSolid * (G4SubtractionSolid::*)()  const>(&G4SubtractionSolid::Clone));


    DEBUG_MSG("Adding wrapper for void G4SubtractionSolid::G4SubtractionSolid(const G4SubtractionSolid &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:76:5
    t.constructor<const G4SubtractionSolid &>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for G4SubtractionSolid & G4SubtractionSolid::operator=(const G4SubtractionSolid &) (" __HERE__ ")");
    // signature to use in the veto list: G4SubtractionSolid & G4SubtractionSolid::operator=(const G4SubtractionSolid &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:77:25
    t.method("assign", static_cast<G4SubtractionSolid & (G4SubtractionSolid::*)(const G4SubtractionSolid &) >(&G4SubtractionSolid::operator=));

    DEBUG_MSG("Adding wrapper for void G4SubtractionSolid::BoundingLimits(G4ThreeVector &, G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: void G4SubtractionSolid::BoundingLimits(G4ThreeVector &, G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:80:10
    t.method("BoundingLimits", static_cast<void (G4SubtractionSolid::*)(G4ThreeVector &, G4ThreeVector &)  const>(&G4SubtractionSolid::BoundingLimits));

    DEBUG_MSG("Adding wrapper for EInside G4SubtractionSolid::Inside(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: EInside G4SubtractionSolid::Inside(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:87:13
    t.method("Inside", static_cast<EInside (G4SubtractionSolid::*)(const G4ThreeVector &)  const>(&G4SubtractionSolid::Inside));

    DEBUG_MSG("Adding wrapper for G4ThreeVector G4SubtractionSolid::SurfaceNormal(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4ThreeVector G4SubtractionSolid::SurfaceNormal(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:89:19
    t.method("SurfaceNormal", static_cast<G4ThreeVector (G4SubtractionSolid::*)(const G4ThreeVector &)  const>(&G4SubtractionSolid::SurfaceNormal));

    DEBUG_MSG("Adding wrapper for G4double G4SubtractionSolid::DistanceToIn(const G4ThreeVector &, const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4SubtractionSolid::DistanceToIn(const G4ThreeVector &, const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:91:14
    t.method("DistanceToIn", static_cast<G4double (G4SubtractionSolid::*)(const G4ThreeVector &, const G4ThreeVector &)  const>(&G4SubtractionSolid::DistanceToIn));

    DEBUG_MSG("Adding wrapper for G4double G4SubtractionSolid::DistanceToIn(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4SubtractionSolid::DistanceToIn(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:94:14
    t.method("DistanceToIn", static_cast<G4double (G4SubtractionSolid::*)(const G4ThreeVector &)  const>(&G4SubtractionSolid::DistanceToIn));

    DEBUG_MSG("Adding wrapper for G4double G4SubtractionSolid::DistanceToOut(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4SubtractionSolid::DistanceToOut(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:96:14
    t.method("DistanceToOut", static_cast<G4double (G4SubtractionSolid::*)(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *)  const>(&G4SubtractionSolid::DistanceToOut));
    t.method("DistanceToOut", [](G4SubtractionSolid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1)->G4double { return a.DistanceToOut(arg0, arg1); });
    t.method("DistanceToOut", [](G4SubtractionSolid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2)->G4double { return a.DistanceToOut(arg0, arg1, arg2); });
    t.method("DistanceToOut", [](G4SubtractionSolid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2, G4bool * arg3)->G4double { return a.DistanceToOut(arg0, arg1, arg2, arg3); });
    t.method("DistanceToOut", [](G4SubtractionSolid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1)->G4double { return a->DistanceToOut(arg0, arg1); });
    t.method("DistanceToOut", [](G4SubtractionSolid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2)->G4double { return a->DistanceToOut(arg0, arg1, arg2); });
    t.method("DistanceToOut", [](G4SubtractionSolid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2, G4bool * arg3)->G4double { return a->DistanceToOut(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for G4double G4SubtractionSolid::DistanceToOut(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4SubtractionSolid::DistanceToOut(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:102:14
    t.method("DistanceToOut", static_cast<G4double (G4SubtractionSolid::*)(const G4ThreeVector &)  const>(&G4SubtractionSolid::DistanceToOut));

    DEBUG_MSG("Adding wrapper for void G4SubtractionSolid::ComputeDimensions(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *) (" __HERE__ ")");
    // signature to use in the veto list: void G4SubtractionSolid::ComputeDimensions(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:105:10
    t.method("ComputeDimensions", static_cast<void (G4SubtractionSolid::*)(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *) >(&G4SubtractionSolid::ComputeDimensions));

    DEBUG_MSG("Adding wrapper for G4Polyhedron * G4SubtractionSolid::CreatePolyhedron() (" __HERE__ ")");
    // signature to use in the veto list: G4Polyhedron * G4SubtractionSolid::CreatePolyhedron()
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:110:19
    t.method("CreatePolyhedron", static_cast<G4Polyhedron * (G4SubtractionSolid::*)()  const>(&G4SubtractionSolid::CreatePolyhedron));

    DEBUG_MSG("Adding wrapper for G4double G4SubtractionSolid::GetCubicVolume() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4SubtractionSolid::GetCubicVolume()
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4SubtractionSolid.hh:112:14
    t.method("GetCubicVolume", static_cast<G4double (G4SubtractionSolid::*)() >(&G4SubtractionSolid::GetCubicVolume));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4SubtractionSolid>> type_;
};
std::shared_ptr<Wrapper> newJlG4SubtractionSolid(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4SubtractionSolid(module));
}

// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4IntersectionSolid> : std::false_type { };
  template<> struct DefaultConstructible<G4IntersectionSolid> : std::false_type { };
template<> struct SuperType<G4IntersectionSolid> { typedef G4BooleanSolid type; };
}

// Class generating the wrapper for type G4IntersectionSolid
// signature to use in the veto file: G4IntersectionSolid
struct JlG4IntersectionSolid: public Wrapper {

  JlG4IntersectionSolid(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4IntersectionSolid (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:45:7
    jlcxx::TypeWrapper<G4IntersectionSolid>  t = jlModule.add_type<G4IntersectionSolid>("G4IntersectionSolid",
      jlcxx::julia_base_type<G4BooleanSolid>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4IntersectionSolid>>(new jlcxx::TypeWrapper<G4IntersectionSolid>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4IntersectionSolid::G4IntersectionSolid(const G4String &, G4VSolid *, G4VSolid *) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:49:5
    t.constructor<const G4String &, G4VSolid *, G4VSolid *>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void G4IntersectionSolid::G4IntersectionSolid(const G4String &, G4VSolid *, G4VSolid *, G4RotationMatrix *, const G4ThreeVector &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:53:5
    t.constructor<const G4String &, G4VSolid *, G4VSolid *, G4RotationMatrix *, const G4ThreeVector &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void G4IntersectionSolid::G4IntersectionSolid(const G4String &, G4VSolid *, G4VSolid *, const G4Transform3D &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:59:5
    t.constructor<const G4String &, G4VSolid *, G4VSolid *, const G4Transform3D &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for G4GeometryType G4IntersectionSolid::GetEntityType() (" __HERE__ ")");
    // signature to use in the veto list: G4GeometryType G4IntersectionSolid::GetEntityType()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:66:21
    t.method("GetEntityType", static_cast<G4GeometryType (G4IntersectionSolid::*)()  const>(&G4IntersectionSolid::GetEntityType));

    DEBUG_MSG("Adding wrapper for G4VSolid * G4IntersectionSolid::Clone() (" __HERE__ ")");
    // signature to use in the veto list: G4VSolid * G4IntersectionSolid::Clone()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:68:15
    t.method("Clone", static_cast<G4VSolid * (G4IntersectionSolid::*)()  const>(&G4IntersectionSolid::Clone));


    DEBUG_MSG("Adding wrapper for void G4IntersectionSolid::G4IntersectionSolid(const G4IntersectionSolid &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:75:5
    t.constructor<const G4IntersectionSolid &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for G4IntersectionSolid & G4IntersectionSolid::operator=(const G4IntersectionSolid &) (" __HERE__ ")");
    // signature to use in the veto list: G4IntersectionSolid & G4IntersectionSolid::operator=(const G4IntersectionSolid &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:76:26
    t.method("assign", static_cast<G4IntersectionSolid & (G4IntersectionSolid::*)(const G4IntersectionSolid &) >(&G4IntersectionSolid::operator=));

    DEBUG_MSG("Adding wrapper for void G4IntersectionSolid::BoundingLimits(G4ThreeVector &, G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: void G4IntersectionSolid::BoundingLimits(G4ThreeVector &, G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:79:10
    t.method("BoundingLimits", static_cast<void (G4IntersectionSolid::*)(G4ThreeVector &, G4ThreeVector &)  const>(&G4IntersectionSolid::BoundingLimits));

    DEBUG_MSG("Adding wrapper for EInside G4IntersectionSolid::Inside(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: EInside G4IntersectionSolid::Inside(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:86:13
    t.method("Inside", static_cast<EInside (G4IntersectionSolid::*)(const G4ThreeVector &)  const>(&G4IntersectionSolid::Inside));

    DEBUG_MSG("Adding wrapper for G4ThreeVector G4IntersectionSolid::SurfaceNormal(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4ThreeVector G4IntersectionSolid::SurfaceNormal(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:88:19
    t.method("SurfaceNormal", static_cast<G4ThreeVector (G4IntersectionSolid::*)(const G4ThreeVector &)  const>(&G4IntersectionSolid::SurfaceNormal));

    DEBUG_MSG("Adding wrapper for G4double G4IntersectionSolid::DistanceToIn(const G4ThreeVector &, const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4IntersectionSolid::DistanceToIn(const G4ThreeVector &, const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:90:14
    t.method("DistanceToIn", static_cast<G4double (G4IntersectionSolid::*)(const G4ThreeVector &, const G4ThreeVector &)  const>(&G4IntersectionSolid::DistanceToIn));

    DEBUG_MSG("Adding wrapper for G4double G4IntersectionSolid::DistanceToIn(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4IntersectionSolid::DistanceToIn(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:93:14
    t.method("DistanceToIn", static_cast<G4double (G4IntersectionSolid::*)(const G4ThreeVector &)  const>(&G4IntersectionSolid::DistanceToIn));

    DEBUG_MSG("Adding wrapper for G4double G4IntersectionSolid::DistanceToOut(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4IntersectionSolid::DistanceToOut(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:95:14
    t.method("DistanceToOut", static_cast<G4double (G4IntersectionSolid::*)(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *)  const>(&G4IntersectionSolid::DistanceToOut));
    t.method("DistanceToOut", [](G4IntersectionSolid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1)->G4double { return a.DistanceToOut(arg0, arg1); });
    t.method("DistanceToOut", [](G4IntersectionSolid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2)->G4double { return a.DistanceToOut(arg0, arg1, arg2); });
    t.method("DistanceToOut", [](G4IntersectionSolid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2, G4bool * arg3)->G4double { return a.DistanceToOut(arg0, arg1, arg2, arg3); });
    t.method("DistanceToOut", [](G4IntersectionSolid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1)->G4double { return a->DistanceToOut(arg0, arg1); });
    t.method("DistanceToOut", [](G4IntersectionSolid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2)->G4double { return a->DistanceToOut(arg0, arg1, arg2); });
    t.method("DistanceToOut", [](G4IntersectionSolid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2, G4bool * arg3)->G4double { return a->DistanceToOut(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for G4double G4IntersectionSolid::DistanceToOut(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4IntersectionSolid::DistanceToOut(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:101:14
    t.method("DistanceToOut", static_cast<G4double (G4IntersectionSolid::*)(const G4ThreeVector &)  const>(&G4IntersectionSolid::DistanceToOut));

    DEBUG_MSG("Adding wrapper for void G4IntersectionSolid::ComputeDimensions(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *) (" __HERE__ ")");
    // signature to use in the veto list: void G4IntersectionSolid::ComputeDimensions(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:104:10
    t.method("ComputeDimensions", static_cast<void (G4IntersectionSolid::*)(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *) >(&G4IntersectionSolid::ComputeDimensions));

    DEBUG_MSG("Adding wrapper for G4Polyhedron * G4IntersectionSolid::CreatePolyhedron() (" __HERE__ ")");
    // signature to use in the veto list: G4Polyhedron * G4IntersectionSolid::CreatePolyhedron()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4IntersectionSolid.hh:109:19
    t.method("CreatePolyhedron", static_cast<G4Polyhedron * (G4IntersectionSolid::*)()  const>(&G4IntersectionSolid::CreatePolyhedron));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4IntersectionSolid>> type_;
};
std::shared_ptr<Wrapper> newJlG4IntersectionSolid(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4IntersectionSolid(module));
}

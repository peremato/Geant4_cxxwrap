// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<HepGeom::Translate3D> : std::false_type { };
  template<> struct DefaultConstructible<HepGeom::Translate3D> : std::false_type { };
template<> struct SuperType<HepGeom::Translate3D> { typedef HepGeom::Transform3D type; };
}

// Class generating the wrapper for type HepGeom::Translate3D
// signature to use in the veto file: HepGeom::Translate3D
struct JlHepGeom_Translate3D: public Wrapper {

  JlHepGeom_Translate3D(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepGeom::Translate3D (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Geometry/Transform3D.h:511:9
    jlcxx::TypeWrapper<HepGeom::Translate3D>  t = jlModule.add_type<HepGeom::Translate3D>("HepGeom!Translate3D",
      jlcxx::julia_base_type<HepGeom::Transform3D>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<HepGeom::Translate3D>>(new jlcxx::TypeWrapper<HepGeom::Translate3D>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void HepGeom::Translate3D::Translate3D(const CLHEP::Hep3Vector &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Geometry/Transform3D.h:519:12
    t.constructor<const CLHEP::Hep3Vector &>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void HepGeom::Translate3D::Translate3D(double, double, double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Geometry/Transform3D.h:523:5
    t.constructor<double, double, double>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<HepGeom::Translate3D>> type_;
};
std::shared_ptr<Wrapper> newJlHepGeom_Translate3D(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepGeom_Translate3D(module));
}

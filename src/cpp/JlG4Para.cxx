// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4Para> : std::false_type { };
  template<> struct DefaultConstructible<G4Para> : std::false_type { };
template<> struct SuperType<G4Para> { typedef G4CSGSolid type; };
}

// Class generating the wrapper for type G4Para
// signature to use in the veto file: G4Para
struct JlG4Para: public Wrapper {

  JlG4Para(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4Para (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:78:7
    jlcxx::TypeWrapper<G4Para>  t = jlModule.add_type<G4Para>("G4Para",
      jlcxx::julia_base_type<G4CSGSolid>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4Para>>(new jlcxx::TypeWrapper<G4Para>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4Para::G4Para(const G4String &, G4double, G4double, G4double, G4double, G4double, G4double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:82:5
    t.constructor<const G4String &, G4double, G4double, G4double, G4double, G4double, G4double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetZHalfLength() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetZHalfLength()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:93:21
    t.method("GetZHalfLength", static_cast<G4double (G4Para::*)()  const>(&G4Para::GetZHalfLength));

    DEBUG_MSG("Adding wrapper for G4ThreeVector G4Para::GetSymAxis() (" __HERE__ ")");
    // signature to use in the veto list: G4ThreeVector G4Para::GetSymAxis()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:94:26
    t.method("GetSymAxis", static_cast<G4ThreeVector (G4Para::*)()  const>(&G4Para::GetSymAxis));

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetYHalfLength() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetYHalfLength()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:95:21
    t.method("GetYHalfLength", static_cast<G4double (G4Para::*)()  const>(&G4Para::GetYHalfLength));

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetXHalfLength() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetXHalfLength()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:96:21
    t.method("GetXHalfLength", static_cast<G4double (G4Para::*)()  const>(&G4Para::GetXHalfLength));

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetTanAlpha() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetTanAlpha()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:97:21
    t.method("GetTanAlpha", static_cast<G4double (G4Para::*)()  const>(&G4Para::GetTanAlpha));

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetAlpha() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetAlpha()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:99:21
    t.method("GetAlpha", static_cast<G4double (G4Para::*)()  const>(&G4Para::GetAlpha));

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetTheta() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetTheta()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:100:21
    t.method("GetTheta", static_cast<G4double (G4Para::*)()  const>(&G4Para::GetTheta));

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetPhi() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetPhi()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:101:21
    t.method("GetPhi", static_cast<G4double (G4Para::*)()  const>(&G4Para::GetPhi));

    DEBUG_MSG("Adding wrapper for void G4Para::SetXHalfLength(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::SetXHalfLength(G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:106:17
    t.method("SetXHalfLength", static_cast<void (G4Para::*)(G4double) >(&G4Para::SetXHalfLength));

    DEBUG_MSG("Adding wrapper for void G4Para::SetYHalfLength(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::SetYHalfLength(G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:107:17
    t.method("SetYHalfLength", static_cast<void (G4Para::*)(G4double) >(&G4Para::SetYHalfLength));

    DEBUG_MSG("Adding wrapper for void G4Para::SetZHalfLength(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::SetZHalfLength(G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:108:17
    t.method("SetZHalfLength", static_cast<void (G4Para::*)(G4double) >(&G4Para::SetZHalfLength));

    DEBUG_MSG("Adding wrapper for void G4Para::SetAlpha(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::SetAlpha(G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:109:17
    t.method("SetAlpha", static_cast<void (G4Para::*)(G4double) >(&G4Para::SetAlpha));

    DEBUG_MSG("Adding wrapper for void G4Para::SetTanAlpha(G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::SetTanAlpha(G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:110:17
    t.method("SetTanAlpha", static_cast<void (G4Para::*)(G4double) >(&G4Para::SetTanAlpha));

    DEBUG_MSG("Adding wrapper for void G4Para::SetThetaAndPhi(G4double, G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::SetThetaAndPhi(G4double, G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:111:17
    t.method("SetThetaAndPhi", static_cast<void (G4Para::*)(G4double, G4double) >(&G4Para::SetThetaAndPhi));

    DEBUG_MSG("Adding wrapper for void G4Para::SetAllParameters(G4double, G4double, G4double, G4double, G4double, G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::SetAllParameters(G4double, G4double, G4double, G4double, G4double, G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:113:10
    t.method("SetAllParameters", static_cast<void (G4Para::*)(G4double, G4double, G4double, G4double, G4double, G4double) >(&G4Para::SetAllParameters));

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetCubicVolume() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetCubicVolume()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:118:14
    t.method("GetCubicVolume", static_cast<G4double (G4Para::*)() >(&G4Para::GetCubicVolume));

    DEBUG_MSG("Adding wrapper for G4double G4Para::GetSurfaceArea() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::GetSurfaceArea()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:119:14
    t.method("GetSurfaceArea", static_cast<G4double (G4Para::*)() >(&G4Para::GetSurfaceArea));

    DEBUG_MSG("Adding wrapper for void G4Para::ComputeDimensions(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::ComputeDimensions(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:121:10
    t.method("ComputeDimensions", static_cast<void (G4Para::*)(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *) >(&G4Para::ComputeDimensions));

    DEBUG_MSG("Adding wrapper for void G4Para::BoundingLimits(G4ThreeVector &, G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: void G4Para::BoundingLimits(G4ThreeVector &, G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:125:10
    t.method("BoundingLimits", static_cast<void (G4Para::*)(G4ThreeVector &, G4ThreeVector &)  const>(&G4Para::BoundingLimits));

    DEBUG_MSG("Adding wrapper for EInside G4Para::Inside(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: EInside G4Para::Inside(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:132:13
    t.method("Inside", static_cast<EInside (G4Para::*)(const G4ThreeVector &)  const>(&G4Para::Inside));

    DEBUG_MSG("Adding wrapper for G4ThreeVector G4Para::SurfaceNormal(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4ThreeVector G4Para::SurfaceNormal(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:134:19
    t.method("SurfaceNormal", static_cast<G4ThreeVector (G4Para::*)(const G4ThreeVector &)  const>(&G4Para::SurfaceNormal));

    DEBUG_MSG("Adding wrapper for G4double G4Para::DistanceToIn(const G4ThreeVector &, const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::DistanceToIn(const G4ThreeVector &, const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:136:14
    t.method("DistanceToIn", static_cast<G4double (G4Para::*)(const G4ThreeVector &, const G4ThreeVector &)  const>(&G4Para::DistanceToIn));

    DEBUG_MSG("Adding wrapper for G4double G4Para::DistanceToIn(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::DistanceToIn(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:138:14
    t.method("DistanceToIn", static_cast<G4double (G4Para::*)(const G4ThreeVector &)  const>(&G4Para::DistanceToIn));

    DEBUG_MSG("Adding wrapper for G4double G4Para::DistanceToOut(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::DistanceToOut(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:140:14
    t.method("DistanceToOut", static_cast<G4double (G4Para::*)(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *)  const>(&G4Para::DistanceToOut));
    t.method("DistanceToOut", [](G4Para const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1)->G4double { return a.DistanceToOut(arg0, arg1); });
    t.method("DistanceToOut", [](G4Para const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2)->G4double { return a.DistanceToOut(arg0, arg1, arg2); });
    t.method("DistanceToOut", [](G4Para const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2, G4bool * arg3)->G4double { return a.DistanceToOut(arg0, arg1, arg2, arg3); });
    t.method("DistanceToOut", [](G4Para const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1)->G4double { return a->DistanceToOut(arg0, arg1); });
    t.method("DistanceToOut", [](G4Para const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2)->G4double { return a->DistanceToOut(arg0, arg1, arg2); });
    t.method("DistanceToOut", [](G4Para const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2, G4bool * arg3)->G4double { return a->DistanceToOut(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for G4double G4Para::DistanceToOut(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Para::DistanceToOut(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:144:14
    t.method("DistanceToOut", static_cast<G4double (G4Para::*)(const G4ThreeVector &)  const>(&G4Para::DistanceToOut));

    DEBUG_MSG("Adding wrapper for G4GeometryType G4Para::GetEntityType() (" __HERE__ ")");
    // signature to use in the veto list: G4GeometryType G4Para::GetEntityType()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:146:20
    t.method("GetEntityType", static_cast<G4GeometryType (G4Para::*)()  const>(&G4Para::GetEntityType));

    DEBUG_MSG("Adding wrapper for G4ThreeVector G4Para::GetPointOnSurface() (" __HERE__ ")");
    // signature to use in the veto list: G4ThreeVector G4Para::GetPointOnSurface()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:148:19
    t.method("GetPointOnSurface", static_cast<G4ThreeVector (G4Para::*)()  const>(&G4Para::GetPointOnSurface));

    DEBUG_MSG("Adding wrapper for G4VSolid * G4Para::Clone() (" __HERE__ ")");
    // signature to use in the veto list: G4VSolid * G4Para::Clone()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:150:15
    t.method("Clone", static_cast<G4VSolid * (G4Para::*)()  const>(&G4Para::Clone));

    DEBUG_MSG("Adding wrapper for G4Polyhedron * G4Para::CreatePolyhedron() (" __HERE__ ")");
    // signature to use in the veto list: G4Polyhedron * G4Para::CreatePolyhedron()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:157:19
    t.method("CreatePolyhedron", static_cast<G4Polyhedron * (G4Para::*)()  const>(&G4Para::CreatePolyhedron));


    DEBUG_MSG("Adding wrapper for void G4Para::G4Para(const G4Para &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:164:5
    t.constructor<const G4Para &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for G4Para & G4Para::operator=(const G4Para &) (" __HERE__ ")");
    // signature to use in the veto list: G4Para & G4Para::operator=(const G4Para &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Para.hh:165:13
    t.method("assign", static_cast<G4Para & (G4Para::*)(const G4Para &) >(&G4Para::operator=));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4Para>> type_;
};
std::shared_ptr<Wrapper> newJlG4Para(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4Para(module));
}

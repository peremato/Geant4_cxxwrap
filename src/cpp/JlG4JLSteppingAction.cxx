// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4JLSteppingAction> : std::false_type { };
  template<> struct DefaultConstructible<G4JLSteppingAction> : std::false_type { };
template<> struct SuperType<G4JLSteppingAction> { typedef G4UserSteppingAction type; };
}

// Class generating the wrapper for type G4JLSteppingAction
// signature to use in the veto file: G4JLSteppingAction
struct JlG4JLSteppingAction: public Wrapper {

  JlG4JLSteppingAction(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4JLSteppingAction (" __HERE__ ")");
    // defined in ./cpp/Geant4Wrap.h:165:7
    jlcxx::TypeWrapper<G4JLSteppingAction>  t = jlModule.add_type<G4JLSteppingAction>("G4JLSteppingAction",
      jlcxx::julia_base_type<G4UserSteppingAction>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4JLSteppingAction>>(new jlcxx::TypeWrapper<G4JLSteppingAction>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4JLSteppingAction::G4JLSteppingAction(stepaction_f, void *) (" __HERE__ ")");
    // defined in ./cpp/Geant4Wrap.h:167:3
    t.constructor<stepaction_f, void *>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void G4JLSteppingAction::UserSteppingAction(const G4Step *) (" __HERE__ ")");
    // signature to use in the veto list: void G4JLSteppingAction::UserSteppingAction(const G4Step *)
    // defined in ./cpp/Geant4Wrap.h:169:16
    t.method("UserSteppingAction", static_cast<void (G4JLSteppingAction::*)(const G4Step *) >(&G4JLSteppingAction::UserSteppingAction));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4JLSteppingAction>> type_;
};
std::shared_ptr<Wrapper> newJlG4JLSteppingAction(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4JLSteppingAction(module));
}

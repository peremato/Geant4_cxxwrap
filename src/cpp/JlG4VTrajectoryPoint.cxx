// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4VTrajectoryPoint> : std::false_type { };
  template<> struct DefaultConstructible<G4VTrajectoryPoint> : std::false_type { };
}

// Class generating the wrapper for type G4VTrajectoryPoint
// signature to use in the veto file: G4VTrajectoryPoint
struct JlG4VTrajectoryPoint: public Wrapper {

  JlG4VTrajectoryPoint(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4VTrajectoryPoint (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4VTrajectoryPoint.hh:50:7
    jlcxx::TypeWrapper<G4VTrajectoryPoint>  t = jlModule.add_type<G4VTrajectoryPoint>("G4VTrajectoryPoint");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4VTrajectoryPoint>>(new jlcxx::TypeWrapper<G4VTrajectoryPoint>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for G4bool G4VTrajectoryPoint::operator==(const G4VTrajectoryPoint &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VTrajectoryPoint::operator==(const G4VTrajectoryPoint &)
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4VTrajectoryPoint.hh:58:10
    t.method("==", [](G4VTrajectoryPoint const& a, const G4VTrajectoryPoint & arg0)->G4bool { return a.operator==(arg0); }, jlcxx::arg("this"), jlcxx::arg("right"));
    t.method("==", [](G4VTrajectoryPoint const* a, const G4VTrajectoryPoint & arg0)->G4bool { return a->operator==(arg0); }, jlcxx::arg("this"), jlcxx::arg("right"));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for const G4ThreeVector G4VTrajectoryPoint::GetPosition() (" __HERE__ ")");
    // signature to use in the veto list: const G4ThreeVector G4VTrajectoryPoint::GetPosition()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4VTrajectoryPoint.hh:61:31
    t.method("GetPosition", [](G4VTrajectoryPoint const& a)->const G4ThreeVector { return a.GetPosition(); }, jlcxx::arg("this"));
    t.method("GetPosition", [](G4VTrajectoryPoint const* a)->const G4ThreeVector { return a->GetPosition(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::vector<G4ThreeVector> * G4VTrajectoryPoint::GetAuxiliaryPoints() (" __HERE__ ")");
    // signature to use in the veto list: const std::vector<G4ThreeVector> * G4VTrajectoryPoint::GetAuxiliaryPoints()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4VTrajectoryPoint.hh:68:45
    t.method("GetAuxiliaryPoints", [](G4VTrajectoryPoint const& a)->const std::vector<G4ThreeVector> * { return a.GetAuxiliaryPoints(); }, jlcxx::arg("this"));
    t.method("GetAuxiliaryPoints", [](G4VTrajectoryPoint const* a)->const std::vector<G4ThreeVector> * { return a->GetAuxiliaryPoints(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::vector<G4AttValue> * G4VTrajectoryPoint::CreateAttValues() (" __HERE__ ")");
    // signature to use in the veto list: std::vector<G4AttValue> * G4VTrajectoryPoint::CreateAttValues()
    // defined in /Users/mato/.julia/artifacts/40f6fc0de669f0d3e0a749c73a29fe79804135d5/include/Geant4/G4VTrajectoryPoint.hh:86:36
    t.method("CreateAttValues", [](G4VTrajectoryPoint const& a)->std::vector<G4AttValue> * { return a.CreateAttValues(); }, jlcxx::arg("this"));
    t.method("CreateAttValues", [](G4VTrajectoryPoint const* a)->std::vector<G4AttValue> * { return a->CreateAttValues(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4VTrajectoryPoint>> type_;
};
std::shared_ptr<Wrapper> newJlG4VTrajectoryPoint(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4VTrajectoryPoint(module));
}

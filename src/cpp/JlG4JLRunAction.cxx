// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4JLRunAction> : std::false_type { };
  template<> struct DefaultConstructible<G4JLRunAction> : std::false_type { };
template<> struct SuperType<G4JLRunAction> { typedef G4UserRunAction type; };
}

// Class generating the wrapper for type G4JLRunAction
// signature to use in the veto file: G4JLRunAction
struct JlG4JLRunAction: public Wrapper {

  JlG4JLRunAction(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4JLRunAction (" __HERE__ ")");
    // defined in cpp/Geant4Wrap.h:202:7
    jlcxx::TypeWrapper<G4JLRunAction>  t = jlModule.add_type<G4JLRunAction>("G4JLRunAction",
      jlcxx::julia_base_type<G4UserRunAction>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4JLRunAction>>(new jlcxx::TypeWrapper<G4JLRunAction>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::no    );


    DEBUG_MSG("Adding wrapper for void G4JLRunAction::G4JLRunAction(runaction_f, void *, runaction_f, void *) (" __HERE__ ")");
    // defined in cpp/Geant4Wrap.h:204:5
    t.constructor<runaction_f>(/*finalize=*/jlcxx::finalize_policy::no, jlcxx::arg("this"), jlcxx::arg("begin")    );
    t.constructor<runaction_f, void *>(/*finalize=*/jlcxx::finalize_policy::no, jlcxx::arg("this"), jlcxx::arg("begin"), jlcxx::arg("begin_d")    );
    t.constructor<runaction_f, void *, runaction_f>(/*finalize=*/jlcxx::finalize_policy::no, jlcxx::arg("this"), jlcxx::arg("begin"), jlcxx::arg("begin_d"), jlcxx::arg("end")    );
    t.constructor<runaction_f, void *, runaction_f, void *>(/*finalize=*/jlcxx::finalize_policy::no, jlcxx::arg("this"), jlcxx::arg("begin"), jlcxx::arg("begin_d"), jlcxx::arg("end"), jlcxx::arg("end_d")    );

    DEBUG_MSG("Adding wrapper for void G4JLRunAction::BeginOfRunAction(const G4Run *) (" __HERE__ ")");
    // signature to use in the veto list: void G4JLRunAction::BeginOfRunAction(const G4Run *)
    // defined in cpp/Geant4Wrap.h:208:18
    t.method("BeginOfRunAction", [](G4JLRunAction& a, const G4Run * arg0)->void { a.BeginOfRunAction(arg0); }, jlcxx::arg("this"), jlcxx::arg("run"));
    t.method("BeginOfRunAction", [](G4JLRunAction* a, const G4Run * arg0)->void { a->BeginOfRunAction(arg0); }, jlcxx::arg("this"), jlcxx::arg("run"));

    DEBUG_MSG("Adding wrapper for void G4JLRunAction::EndOfRunAction(const G4Run *) (" __HERE__ ")");
    // signature to use in the veto list: void G4JLRunAction::EndOfRunAction(const G4Run *)
    // defined in cpp/Geant4Wrap.h:209:20
    t.method("EndOfRunAction", [](G4JLRunAction& a, const G4Run * arg0)->void { a.EndOfRunAction(arg0); }, jlcxx::arg("this"), jlcxx::arg("run"));
    t.method("EndOfRunAction", [](G4JLRunAction* a, const G4Run * arg0)->void { a->EndOfRunAction(arg0); }, jlcxx::arg("this"), jlcxx::arg("run"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4JLRunAction>> type_;
};
std::shared_ptr<Wrapper> newJlG4JLRunAction(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4JLRunAction(module));
}

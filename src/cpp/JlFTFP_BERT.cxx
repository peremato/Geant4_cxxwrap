// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<FTFP_BERT> : std::false_type { };
  template<> struct DefaultConstructible<FTFP_BERT> : std::false_type { };
template<> struct SuperType<FTFP_BERT> { typedef G4VModularPhysicsList type; };
}

// Class generating the wrapper for type FTFP_BERT
// signature to use in the veto file: FTFP_BERT
struct JlFTFP_BERT: public Wrapper {

  JlFTFP_BERT(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type FTFP_BERT (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/FTFP_BERT.hh:46:7
    jlcxx::TypeWrapper<FTFP_BERT>  t = jlModule.add_type<FTFP_BERT>("FTFP_BERT",
      jlcxx::julia_base_type<G4VModularPhysicsList>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<FTFP_BERT>>(new jlcxx::TypeWrapper<FTFP_BERT>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void FTFP_BERT::FTFP_BERT(G4int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/FTFP_BERT.hh:49:3
    t.constructor<G4int>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<FTFP_BERT>> type_;
};
std::shared_ptr<Wrapper> newJlFTFP_BERT(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlFTFP_BERT(module));
}

// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4ProcessVector> : std::false_type { };
  template<> struct DefaultConstructible<G4ProcessVector> : std::false_type { };
}

// Class generating the wrapper for type G4ProcessVector
// signature to use in the veto file: G4ProcessVector
struct JlG4ProcessVector: public Wrapper {

  JlG4ProcessVector(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4ProcessVector (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:44:7
    jlcxx::TypeWrapper<G4ProcessVector>  t = jlModule.add_type<G4ProcessVector>("G4ProcessVector");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4ProcessVector>>(new jlcxx::TypeWrapper<G4ProcessVector>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void G4ProcessVector::G4ProcessVector(const G4ProcessVector &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:50:5
    t.constructor<const G4ProcessVector &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for G4ProcessVector & G4ProcessVector::operator=(const G4ProcessVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4ProcessVector & G4ProcessVector::operator=(const G4ProcessVector &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:56:22
    t.method("assign", static_cast<G4ProcessVector & (G4ProcessVector::*)(const G4ProcessVector &) >(&G4ProcessVector::operator=));
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for G4bool G4ProcessVector::operator==(const G4ProcessVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4ProcessVector::operator==(const G4ProcessVector &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:59:19
    t.method("==", static_cast<G4bool (G4ProcessVector::*)(const G4ProcessVector &)  const>(&G4ProcessVector::operator==));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for G4bool G4ProcessVector::contains(G4VProcess *) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4ProcessVector::contains(G4VProcess *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:70:12
    t.method("contains", static_cast<G4bool (G4ProcessVector::*)(G4VProcess *)  const>(&G4ProcessVector::contains));

    DEBUG_MSG("Adding wrapper for G4bool G4ProcessVector::insert(G4VProcess *) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4ProcessVector::insert(G4VProcess *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:73:19
    t.method("insert", static_cast<G4bool (G4ProcessVector::*)(G4VProcess *) >(&G4ProcessVector::insert));

    DEBUG_MSG("Adding wrapper for G4bool G4ProcessVector::insertAt(G4int, G4VProcess *) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4ProcessVector::insertAt(G4int, G4VProcess *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:76:12
    t.method("insertAt", static_cast<G4bool (G4ProcessVector::*)(G4int, G4VProcess *) >(&G4ProcessVector::insertAt));

    DEBUG_MSG("Adding wrapper for G4VProcess * G4ProcessVector::removeAt(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4VProcess * G4ProcessVector::removeAt(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:79:17
    t.method("removeAt", static_cast<G4VProcess * (G4ProcessVector::*)(G4int) >(&G4ProcessVector::removeAt));

    DEBUG_MSG("Adding wrapper for G4VProcess * G4ProcessVector::removeLast() (" __HERE__ ")");
    // signature to use in the veto list: G4VProcess * G4ProcessVector::removeLast()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:82:24
    t.method("removeLast", static_cast<G4VProcess * (G4ProcessVector::*)() >(&G4ProcessVector::removeLast));

    DEBUG_MSG("Adding wrapper for void G4ProcessVector::clear() (" __HERE__ ")");
    // signature to use in the veto list: void G4ProcessVector::clear()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:85:17
    t.method("clear", static_cast<void (G4ProcessVector::*)() >(&G4ProcessVector::clear));
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding getindex method to wrap G4VProcess *const & G4ProcessVector::operator[](G4int) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:88:31
    t.method("getindex",
      [](G4ProcessVector& a, G4int i){
      return a[i];
    });

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for G4VProcess *const & G4ProcessVector::operator()(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4VProcess *const & G4ProcessVector::operator()(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:89:31
    t.method("paren", static_cast<G4VProcess *const & (G4ProcessVector::*)(G4int)  const>(&G4ProcessVector::operator()));
    module_.set_override_module(jl_base_module);


    DEBUG_MSG("Adding setindex! method  to wrap G4VProcess *& G4ProcessVector::operator[](G4int) (" __HERE__ ")");
// defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:92:26
    t.method("setindex!",
      [](G4ProcessVector& a, G4int i, G4VProcess * const & val){
      return a[i] = val;
    });

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for G4VProcess *& G4ProcessVector::operator()(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4VProcess *& G4ProcessVector::operator()(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4ProcessVector.hh:93:26
    t.method("paren", static_cast<G4VProcess *& (G4ProcessVector::*)(G4int) >(&G4ProcessVector::operator()));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4ProcessVector>> type_;
};
std::shared_ptr<Wrapper> newJlG4ProcessVector(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4ProcessVector(module));
}

// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4CSGSolid> : std::false_type { };
  template<> struct DefaultConstructible<G4CSGSolid> : std::false_type { };
template<> struct SuperType<G4CSGSolid> { typedef G4VSolid type; };
}

// Class generating the wrapper for type G4CSGSolid
// signature to use in the veto file: G4CSGSolid
struct JlG4CSGSolid: public Wrapper {

  JlG4CSGSolid(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4CSGSolid (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4CSGSolid.hh:41:7
    jlcxx::TypeWrapper<G4CSGSolid>  t = jlModule.add_type<G4CSGSolid>("G4CSGSolid",
      jlcxx::julia_base_type<G4VSolid>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4CSGSolid>>(new jlcxx::TypeWrapper<G4CSGSolid>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for G4Polyhedron * G4CSGSolid::GetPolyhedron() (" __HERE__ ")");
    // signature to use in the veto list: G4Polyhedron * G4CSGSolid::GetPolyhedron()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4CSGSolid.hh:50:19
    t.method("GetPolyhedron", static_cast<G4Polyhedron * (G4CSGSolid::*)()  const>(&G4CSGSolid::GetPolyhedron));


    DEBUG_MSG("Adding wrapper for G4CSGSolid & G4CSGSolid::operator=(const G4CSGSolid &) (" __HERE__ ")");
    // signature to use in the veto list: G4CSGSolid & G4CSGSolid::operator=(const G4CSGSolid &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4CSGSolid.hh:58:17
    t.method("assign", static_cast<G4CSGSolid & (G4CSGSolid::*)(const G4CSGSolid &) >(&G4CSGSolid::operator=));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4CSGSolid>> type_;
};
std::shared_ptr<Wrapper> newJlG4CSGSolid(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4CSGSolid(module));
}

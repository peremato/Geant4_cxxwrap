// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4Ellipsoid> : std::false_type { };
  template<> struct DefaultConstructible<G4Ellipsoid> : std::false_type { };
template<> struct SuperType<G4Ellipsoid> { typedef G4VSolid type; };
}

// Class generating the wrapper for type G4Ellipsoid
// signature to use in the veto file: G4Ellipsoid
struct JlG4Ellipsoid: public Wrapper {

  JlG4Ellipsoid(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4Ellipsoid (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:63:7
    jlcxx::TypeWrapper<G4Ellipsoid>  t = jlModule.add_type<G4Ellipsoid>("G4Ellipsoid",
      jlcxx::julia_base_type<G4VSolid>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4Ellipsoid>>(new jlcxx::TypeWrapper<G4Ellipsoid>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4Ellipsoid::G4Ellipsoid(const G4String &, G4double, G4double, G4double, G4double, G4double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:67:5
    t.constructor<const G4String &, G4double, G4double, G4double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const G4String &, G4double, G4double, G4double, G4double>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const G4String &, G4double, G4double, G4double, G4double, G4double>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::GetDx() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::GetDx()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:77:21
    t.method("GetDx", static_cast<G4double (G4Ellipsoid::*)()  const>(&G4Ellipsoid::GetDx));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::GetDy() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::GetDy()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:78:21
    t.method("GetDy", static_cast<G4double (G4Ellipsoid::*)()  const>(&G4Ellipsoid::GetDy));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::GetDz() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::GetDz()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:79:21
    t.method("GetDz", static_cast<G4double (G4Ellipsoid::*)()  const>(&G4Ellipsoid::GetDz));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::GetSemiAxisMax(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::GetSemiAxisMax(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:80:21
    t.method("GetSemiAxisMax", static_cast<G4double (G4Ellipsoid::*)(G4int)  const>(&G4Ellipsoid::GetSemiAxisMax));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::GetZBottomCut() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::GetZBottomCut()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:81:21
    t.method("GetZBottomCut", static_cast<G4double (G4Ellipsoid::*)()  const>(&G4Ellipsoid::GetZBottomCut));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::GetZTopCut() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::GetZTopCut()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:82:21
    t.method("GetZTopCut", static_cast<G4double (G4Ellipsoid::*)()  const>(&G4Ellipsoid::GetZTopCut));

    DEBUG_MSG("Adding wrapper for void G4Ellipsoid::SetSemiAxis(G4double, G4double, G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Ellipsoid::SetSemiAxis(G4double, G4double, G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:85:17
    t.method("SetSemiAxis", static_cast<void (G4Ellipsoid::*)(G4double, G4double, G4double) >(&G4Ellipsoid::SetSemiAxis));

    DEBUG_MSG("Adding wrapper for void G4Ellipsoid::SetZCuts(G4double, G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4Ellipsoid::SetZCuts(G4double, G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:86:17
    t.method("SetZCuts", static_cast<void (G4Ellipsoid::*)(G4double, G4double) >(&G4Ellipsoid::SetZCuts));

    DEBUG_MSG("Adding wrapper for void G4Ellipsoid::ComputeDimensions(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *) (" __HERE__ ")");
    // signature to use in the veto list: void G4Ellipsoid::ComputeDimensions(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:89:10
    t.method("ComputeDimensions", static_cast<void (G4Ellipsoid::*)(G4VPVParameterisation *, const G4int, const G4VPhysicalVolume *) >(&G4Ellipsoid::ComputeDimensions));

    DEBUG_MSG("Adding wrapper for void G4Ellipsoid::BoundingLimits(G4ThreeVector &, G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: void G4Ellipsoid::BoundingLimits(G4ThreeVector &, G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:93:10
    t.method("BoundingLimits", static_cast<void (G4Ellipsoid::*)(G4ThreeVector &, G4ThreeVector &)  const>(&G4Ellipsoid::BoundingLimits));

    DEBUG_MSG("Adding wrapper for EInside G4Ellipsoid::Inside(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: EInside G4Ellipsoid::Inside(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:99:13
    t.method("Inside", static_cast<EInside (G4Ellipsoid::*)(const G4ThreeVector &)  const>(&G4Ellipsoid::Inside));

    DEBUG_MSG("Adding wrapper for G4ThreeVector G4Ellipsoid::SurfaceNormal(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4ThreeVector G4Ellipsoid::SurfaceNormal(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:100:19
    t.method("SurfaceNormal", static_cast<G4ThreeVector (G4Ellipsoid::*)(const G4ThreeVector &)  const>(&G4Ellipsoid::SurfaceNormal));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::DistanceToIn(const G4ThreeVector &, const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::DistanceToIn(const G4ThreeVector &, const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:101:14
    t.method("DistanceToIn", static_cast<G4double (G4Ellipsoid::*)(const G4ThreeVector &, const G4ThreeVector &)  const>(&G4Ellipsoid::DistanceToIn));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::DistanceToIn(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::DistanceToIn(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:103:14
    t.method("DistanceToIn", static_cast<G4double (G4Ellipsoid::*)(const G4ThreeVector &)  const>(&G4Ellipsoid::DistanceToIn));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::DistanceToOut(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::DistanceToOut(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:104:14
    t.method("DistanceToOut", static_cast<G4double (G4Ellipsoid::*)(const G4ThreeVector &, const G4ThreeVector &, const G4bool, G4bool *, G4ThreeVector *)  const>(&G4Ellipsoid::DistanceToOut));
    t.method("DistanceToOut", [](G4Ellipsoid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1)->G4double { return a.DistanceToOut(arg0, arg1); });
    t.method("DistanceToOut", [](G4Ellipsoid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2)->G4double { return a.DistanceToOut(arg0, arg1, arg2); });
    t.method("DistanceToOut", [](G4Ellipsoid const& a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2, G4bool * arg3)->G4double { return a.DistanceToOut(arg0, arg1, arg2, arg3); });
    t.method("DistanceToOut", [](G4Ellipsoid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1)->G4double { return a->DistanceToOut(arg0, arg1); });
    t.method("DistanceToOut", [](G4Ellipsoid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2)->G4double { return a->DistanceToOut(arg0, arg1, arg2); });
    t.method("DistanceToOut", [](G4Ellipsoid const* a, const G4ThreeVector & arg0, const G4ThreeVector & arg1, const G4bool arg2, G4bool * arg3)->G4double { return a->DistanceToOut(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::DistanceToOut(const G4ThreeVector &) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::DistanceToOut(const G4ThreeVector &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:109:14
    t.method("DistanceToOut", static_cast<G4double (G4Ellipsoid::*)(const G4ThreeVector &)  const>(&G4Ellipsoid::DistanceToOut));

    DEBUG_MSG("Adding wrapper for G4GeometryType G4Ellipsoid::GetEntityType() (" __HERE__ ")");
    // signature to use in the veto list: G4GeometryType G4Ellipsoid::GetEntityType()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:111:20
    t.method("GetEntityType", static_cast<G4GeometryType (G4Ellipsoid::*)()  const>(&G4Ellipsoid::GetEntityType));

    DEBUG_MSG("Adding wrapper for G4VSolid * G4Ellipsoid::Clone() (" __HERE__ ")");
    // signature to use in the veto list: G4VSolid * G4Ellipsoid::Clone()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:113:15
    t.method("Clone", static_cast<G4VSolid * (G4Ellipsoid::*)()  const>(&G4Ellipsoid::Clone));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::GetCubicVolume() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::GetCubicVolume()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:117:14
    t.method("GetCubicVolume", static_cast<G4double (G4Ellipsoid::*)() >(&G4Ellipsoid::GetCubicVolume));

    DEBUG_MSG("Adding wrapper for G4double G4Ellipsoid::GetSurfaceArea() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4Ellipsoid::GetSurfaceArea()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:118:14
    t.method("GetSurfaceArea", static_cast<G4double (G4Ellipsoid::*)() >(&G4Ellipsoid::GetSurfaceArea));

    DEBUG_MSG("Adding wrapper for G4ThreeVector G4Ellipsoid::GetPointOnSurface() (" __HERE__ ")");
    // signature to use in the veto list: G4ThreeVector G4Ellipsoid::GetPointOnSurface()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:120:19
    t.method("GetPointOnSurface", static_cast<G4ThreeVector (G4Ellipsoid::*)()  const>(&G4Ellipsoid::GetPointOnSurface));

    DEBUG_MSG("Adding wrapper for G4Polyhedron * G4Ellipsoid::CreatePolyhedron() (" __HERE__ ")");
    // signature to use in the veto list: G4Polyhedron * G4Ellipsoid::CreatePolyhedron()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:125:19
    t.method("CreatePolyhedron", static_cast<G4Polyhedron * (G4Ellipsoid::*)()  const>(&G4Ellipsoid::CreatePolyhedron));

    DEBUG_MSG("Adding wrapper for G4Polyhedron * G4Ellipsoid::GetPolyhedron() (" __HERE__ ")");
    // signature to use in the veto list: G4Polyhedron * G4Ellipsoid::GetPolyhedron()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:126:19
    t.method("GetPolyhedron", static_cast<G4Polyhedron * (G4Ellipsoid::*)()  const>(&G4Ellipsoid::GetPolyhedron));


    DEBUG_MSG("Adding wrapper for void G4Ellipsoid::G4Ellipsoid(const G4Ellipsoid &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:134:5
    t.constructor<const G4Ellipsoid &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for G4Ellipsoid & G4Ellipsoid::operator=(const G4Ellipsoid &) (" __HERE__ ")");
    // signature to use in the veto list: G4Ellipsoid & G4Ellipsoid::operator=(const G4Ellipsoid &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4Ellipsoid.hh:137:18
    t.method("assign", static_cast<G4Ellipsoid & (G4Ellipsoid::*)(const G4Ellipsoid &) >(&G4Ellipsoid::operator=));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4Ellipsoid>> type_;
};
std::shared_ptr<Wrapper> newJlG4Ellipsoid(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4Ellipsoid(module));
}

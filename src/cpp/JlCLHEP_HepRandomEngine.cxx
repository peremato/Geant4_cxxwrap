// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<CLHEP::HepRandomEngine> : std::false_type { };
  template<> struct DefaultConstructible<CLHEP::HepRandomEngine> : std::false_type { };
}

// Class generating the wrapper for type CLHEP::HepRandomEngine
// signature to use in the veto file: CLHEP::HepRandomEngine
struct JlCLHEP_HepRandomEngine: public Wrapper {

  JlCLHEP_HepRandomEngine(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type CLHEP::HepRandomEngine (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:53:7
    jlcxx::TypeWrapper<CLHEP::HepRandomEngine>  t = jlModule.add_type<CLHEP::HepRandomEngine>("CLHEP!HepRandomEngine");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<CLHEP::HepRandomEngine>>(new jlcxx::TypeWrapper<CLHEP::HepRandomEngine>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for bool CLHEP::HepRandomEngine::operator==(const CLHEP::HepRandomEngine &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::HepRandomEngine::operator==(const CLHEP::HepRandomEngine &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:61:15
    t.method("==", static_cast<bool (CLHEP::HepRandomEngine::*)(const CLHEP::HepRandomEngine &) >(&CLHEP::HepRandomEngine::operator==));

    DEBUG_MSG("Adding wrapper for bool CLHEP::HepRandomEngine::operator!=(const CLHEP::HepRandomEngine &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::HepRandomEngine::operator!=(const CLHEP::HepRandomEngine &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:62:15
    t.method("!=", static_cast<bool (CLHEP::HepRandomEngine::*)(const CLHEP::HepRandomEngine &) >(&CLHEP::HepRandomEngine::operator!=));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for double CLHEP::HepRandomEngine::flat() (" __HERE__ ")");
    // signature to use in the veto list: double CLHEP::HepRandomEngine::flat()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:65:18
    t.method("flat", static_cast<double (CLHEP::HepRandomEngine::*)() >(&CLHEP::HepRandomEngine::flat));

    DEBUG_MSG("Adding wrapper for void CLHEP::HepRandomEngine::flatArray(const int, double *) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::HepRandomEngine::flatArray(const int, double *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:69:16
    t.method("flatArray", static_cast<void (CLHEP::HepRandomEngine::*)(const int, double *) >(&CLHEP::HepRandomEngine::flatArray));

    DEBUG_MSG("Adding wrapper for void CLHEP::HepRandomEngine::setSeed(long, int) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::HepRandomEngine::setSeed(long, int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:72:16
    t.method("setSeed", static_cast<void (CLHEP::HepRandomEngine::*)(long, int) >(&CLHEP::HepRandomEngine::setSeed));

    DEBUG_MSG("Adding wrapper for void CLHEP::HepRandomEngine::setSeeds(const long *, int) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::HepRandomEngine::setSeeds(const long *, int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:75:16
    t.method("setSeeds", static_cast<void (CLHEP::HepRandomEngine::*)(const long *, int) >(&CLHEP::HepRandomEngine::setSeeds));

    DEBUG_MSG("Adding wrapper for void CLHEP::HepRandomEngine::saveStatus(const char []) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::HepRandomEngine::saveStatus(const char [])
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:79:16
    t.method("saveStatus", static_cast<void (CLHEP::HepRandomEngine::*)(const char [])  const>(&CLHEP::HepRandomEngine::saveStatus));
    t.method("saveStatus", [](CLHEP::HepRandomEngine const& a)->void { a.saveStatus(); });
    t.method("saveStatus", [](CLHEP::HepRandomEngine const* a)->void { a->saveStatus(); });

    DEBUG_MSG("Adding wrapper for void CLHEP::HepRandomEngine::restoreStatus(const char []) (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::HepRandomEngine::restoreStatus(const char [])
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:83:16
    t.method("restoreStatus", static_cast<void (CLHEP::HepRandomEngine::*)(const char []) >(&CLHEP::HepRandomEngine::restoreStatus));
    t.method("restoreStatus", [](CLHEP::HepRandomEngine& a)->void { a.restoreStatus(); });
    t.method("restoreStatus", [](CLHEP::HepRandomEngine* a)->void { a->restoreStatus(); });

    DEBUG_MSG("Adding wrapper for void CLHEP::HepRandomEngine::showStatus() (" __HERE__ ")");
    // signature to use in the veto list: void CLHEP::HepRandomEngine::showStatus()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:87:16
    t.method("showStatus", static_cast<void (CLHEP::HepRandomEngine::*)()  const>(&CLHEP::HepRandomEngine::showStatus));

    DEBUG_MSG("Adding wrapper for std::string CLHEP::HepRandomEngine::name() (" __HERE__ ")");
    // signature to use in the veto list: std::string CLHEP::HepRandomEngine::name()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:90:23
    t.method("name", static_cast<std::string (CLHEP::HepRandomEngine::*)()  const>(&CLHEP::HepRandomEngine::name));

    DEBUG_MSG("Adding wrapper for std::string CLHEP::HepRandomEngine::beginTag() (" __HERE__ ")");
    // signature to use in the veto list: std::string CLHEP::HepRandomEngine::beginTag()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:97:22
    module_.method("CLHEP!HepRandomEngine!beginTag", static_cast<std::string (*)() >(&CLHEP::HepRandomEngine::beginTag));

    DEBUG_MSG("Adding wrapper for CLHEP::HepRandomEngine * CLHEP::HepRandomEngine::newEngine(const std::vector<unsigned long> &) (" __HERE__ ")");
    // signature to use in the veto list: CLHEP::HepRandomEngine * CLHEP::HepRandomEngine::newEngine(const std::vector<unsigned long> &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:104:27
    module_.method("CLHEP!HepRandomEngine!newEngine", static_cast<CLHEP::HepRandomEngine * (*)(const std::vector<unsigned long> &) >(&CLHEP::HepRandomEngine::newEngine));

    DEBUG_MSG("Adding wrapper for std::vector<unsigned long> CLHEP::HepRandomEngine::put() (" __HERE__ ")");
    // signature to use in the veto list: std::vector<unsigned long> CLHEP::HepRandomEngine::put()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:107:38
    t.method("put", static_cast<std::vector<unsigned long> (CLHEP::HepRandomEngine::*)()  const>(&CLHEP::HepRandomEngine::put));

    DEBUG_MSG("Adding wrapper for bool CLHEP::HepRandomEngine::getState(const std::vector<unsigned long> &) (" __HERE__ ")");
    // signature to use in the veto list: bool CLHEP::HepRandomEngine::getState(const std::vector<unsigned long> &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:109:16
    t.method("getState", static_cast<bool (CLHEP::HepRandomEngine::*)(const std::vector<unsigned long> &) >(&CLHEP::HepRandomEngine::getState));

    DEBUG_MSG("Adding wrapper for long CLHEP::HepRandomEngine::getSeed() (" __HERE__ ")");
    // signature to use in the veto list: long CLHEP::HepRandomEngine::getSeed()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:112:8
    t.method("getSeed", static_cast<long (CLHEP::HepRandomEngine::*)()  const>(&CLHEP::HepRandomEngine::getSeed));

    DEBUG_MSG("Adding wrapper for const long * CLHEP::HepRandomEngine::getSeeds() (" __HERE__ ")");
    // signature to use in the veto list: const long * CLHEP::HepRandomEngine::getSeeds()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/CLHEP/Random/RandomEngine.h:115:15
    t.method("getSeeds", static_cast<const long * (CLHEP::HepRandomEngine::*)()  const>(&CLHEP::HepRandomEngine::getSeeds));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<CLHEP::HepRandomEngine>> type_;
};
std::shared_ptr<Wrapper> newJlCLHEP_HepRandomEngine(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlCLHEP_HepRandomEngine(module));
}

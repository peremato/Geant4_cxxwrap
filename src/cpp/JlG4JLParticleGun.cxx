// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4JLParticleGun> : std::false_type { };
  template<> struct DefaultConstructible<G4JLParticleGun> : std::false_type { };
template<> struct SuperType<G4JLParticleGun> { typedef G4VUserPrimaryGeneratorAction type; };
}

// Class generating the wrapper for type G4JLParticleGun
// signature to use in the veto file: G4JLParticleGun
struct JlG4JLParticleGun: public Wrapper {

  JlG4JLParticleGun(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4JLParticleGun (" __HERE__ ")");
    // defined in ./cpp/Geant4Wrap.h:124:7
    jlcxx::TypeWrapper<G4JLParticleGun>  t = jlModule.add_type<G4JLParticleGun>("G4JLParticleGun",
      jlcxx::julia_base_type<G4VUserPrimaryGeneratorAction>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4JLParticleGun>>(new jlcxx::TypeWrapper<G4JLParticleGun>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::no);

    DEBUG_MSG("Adding wrapper for G4ParticleGun * G4JLParticleGun::GetGun() (" __HERE__ ")");
    // signature to use in the veto list: G4ParticleGun * G4JLParticleGun::GetGun()
    // defined in ./cpp/Geant4Wrap.h:128:18
    t.method("GetGun", static_cast<G4ParticleGun * (G4JLParticleGun::*)()  const>(&G4JLParticleGun::GetGun));

    DEBUG_MSG("Adding wrapper for void G4JLParticleGun::GeneratePrimaries(G4Event *) (" __HERE__ ")");
    // signature to use in the veto list: void G4JLParticleGun::GeneratePrimaries(G4Event *)
    // defined in ./cpp/Geant4Wrap.h:129:8
    t.method("GeneratePrimaries", static_cast<void (G4JLParticleGun::*)(G4Event *) >(&G4JLParticleGun::GeneratePrimaries));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4JLParticleGun>> type_;
};
std::shared_ptr<Wrapper> newJlG4JLParticleGun(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4JLParticleGun(module));
}

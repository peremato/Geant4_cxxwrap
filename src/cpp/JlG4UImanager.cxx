// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4UImanager> : std::false_type { };
  template<> struct DefaultConstructible<G4UImanager> : std::false_type { };
template<> struct SuperType<G4UImanager> { typedef G4VStateDependent type; };
}

// Class generating the wrapper for type G4UImanager
// signature to use in the veto file: G4UImanager
struct JlG4UImanager: public Wrapper {

  JlG4UImanager(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4UImanager (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:58:7
    jlcxx::TypeWrapper<G4UImanager>  t = jlModule.add_type<G4UImanager>("G4UImanager",
      jlcxx::julia_base_type<G4VStateDependent>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4UImanager>>(new jlcxx::TypeWrapper<G4UImanager>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;

    DEBUG_MSG("Adding wrapper for G4UImanager * G4UImanager::GetUIpointer() (" __HERE__ ")");
    // signature to use in the veto list: G4UImanager * G4UImanager::GetUIpointer()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:63:25
    module_.method("G4UImanager!GetUIpointer", static_cast<G4UImanager * (*)() >(&G4UImanager::GetUIpointer));

    DEBUG_MSG("Adding wrapper for G4UImanager * G4UImanager::GetMasterUIpointer() (" __HERE__ ")");
    // signature to use in the veto list: G4UImanager * G4UImanager::GetMasterUIpointer()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:64:25
    module_.method("G4UImanager!GetMasterUIpointer", static_cast<G4UImanager * (*)() >(&G4UImanager::GetMasterUIpointer));

    DEBUG_MSG("Adding wrapper for G4String G4UImanager::GetCurrentValues(const char *) (" __HERE__ ")");
    // signature to use in the veto list: G4String G4UImanager::GetCurrentValues(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:77:14
    t.method("GetCurrentValues", static_cast<G4String (G4UImanager::*)(const char *) >(&G4UImanager::GetCurrentValues));

    DEBUG_MSG("Adding wrapper for void G4UImanager::AddNewCommand(G4UIcommand *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::AddNewCommand(G4UIcommand *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:80:10
    t.method("AddNewCommand", static_cast<void (G4UImanager::*)(G4UIcommand *) >(&G4UImanager::AddNewCommand));

    DEBUG_MSG("Adding wrapper for void G4UImanager::RemoveCommand(G4UIcommand *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::RemoveCommand(G4UIcommand *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:84:10
    t.method("RemoveCommand", static_cast<void (G4UImanager::*)(G4UIcommand *) >(&G4UImanager::RemoveCommand));

    DEBUG_MSG("Adding wrapper for void G4UImanager::ExecuteMacroFile(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::ExecuteMacroFile(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:87:10
    t.method("ExecuteMacroFile", static_cast<void (G4UImanager::*)(const char *) >(&G4UImanager::ExecuteMacroFile));

    DEBUG_MSG("Adding wrapper for void G4UImanager::Loop(const char *, const char *, G4double, G4double, G4double) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::Loop(const char *, const char *, G4double, G4double, G4double)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:90:10
    t.method("Loop", static_cast<void (G4UImanager::*)(const char *, const char *, G4double, G4double, G4double) >(&G4UImanager::Loop));
    t.method("Loop", [](G4UImanager& a, const char * arg0, const char * arg1, G4double arg2, G4double arg3)->void { a.Loop(arg0, arg1, arg2, arg3); });
    t.method("Loop", [](G4UImanager* a, const char * arg0, const char * arg1, G4double arg2, G4double arg3)->void { a->Loop(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::Foreach(const char *, const char *, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::Foreach(const char *, const char *, const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:95:10
    t.method("Foreach", static_cast<void (G4UImanager::*)(const char *, const char *, const char *) >(&G4UImanager::Foreach));

    DEBUG_MSG("Adding wrapper for G4int G4UImanager::ApplyCommand(const char *) (" __HERE__ ")");
    // signature to use in the veto list: G4int G4UImanager::ApplyCommand(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:105:11
    t.method("ApplyCommand", static_cast<G4int (G4UImanager::*)(const char *) >(&G4UImanager::ApplyCommand));

    DEBUG_MSG("Adding wrapper for G4UIcommand * G4UImanager::FindCommand(const char *) (" __HERE__ ")");
    // signature to use in the veto list: G4UIcommand * G4UImanager::FindCommand(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:112:18
    t.method("FindCommand", static_cast<G4UIcommand * (G4UImanager::*)(const char *) >(&G4UImanager::FindCommand));

    DEBUG_MSG("Adding wrapper for G4UIcommand * G4UImanager::FindCommand(const G4String &) (" __HERE__ ")");
    // signature to use in the veto list: G4UIcommand * G4UImanager::FindCommand(const G4String &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:113:18
    t.method("FindCommand", static_cast<G4UIcommand * (G4UImanager::*)(const G4String &) >(&G4UImanager::FindCommand));

    DEBUG_MSG("Adding wrapper for void G4UImanager::StoreHistory(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::StoreHistory(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:117:10
    t.method("StoreHistory", static_cast<void (G4UImanager::*)(const char *) >(&G4UImanager::StoreHistory));
    t.method("StoreHistory", [](G4UImanager& a)->void { a.StoreHistory(); });
    t.method("StoreHistory", [](G4UImanager* a)->void { a->StoreHistory(); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::StoreHistory(G4bool, const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::StoreHistory(G4bool, const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:118:10
    t.method("StoreHistory", static_cast<void (G4UImanager::*)(G4bool, const char *) >(&G4UImanager::StoreHistory));
    t.method("StoreHistory", [](G4UImanager& a, G4bool arg0)->void { a.StoreHistory(arg0); });
    t.method("StoreHistory", [](G4UImanager* a, G4bool arg0)->void { a->StoreHistory(arg0); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::ListCommands(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::ListCommands(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:122:10
    t.method("ListCommands", static_cast<void (G4UImanager::*)(const char *) >(&G4UImanager::ListCommands));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetAlias(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetAlias(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:127:10
    t.method("SetAlias", static_cast<void (G4UImanager::*)(const char *) >(&G4UImanager::SetAlias));

    DEBUG_MSG("Adding wrapper for void G4UImanager::RemoveAlias(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::RemoveAlias(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:130:10
    t.method("RemoveAlias", static_cast<void (G4UImanager::*)(const char *) >(&G4UImanager::RemoveAlias));

    DEBUG_MSG("Adding wrapper for void G4UImanager::ListAlias() (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::ListAlias()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:133:10
    t.method("ListAlias", static_cast<void (G4UImanager::*)() >(&G4UImanager::ListAlias));

    DEBUG_MSG("Adding wrapper for G4String G4UImanager::SolveAlias(const char *) (" __HERE__ ")");
    // signature to use in the veto list: G4String G4UImanager::SolveAlias(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:136:14
    t.method("SolveAlias", static_cast<G4String (G4UImanager::*)(const char *) >(&G4UImanager::SolveAlias));

    DEBUG_MSG("Adding wrapper for void G4UImanager::CreateHTML(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::CreateHTML(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:139:10
    t.method("CreateHTML", static_cast<void (G4UImanager::*)(const char *) >(&G4UImanager::CreateHTML));
    t.method("CreateHTML", [](G4UImanager& a)->void { a.CreateHTML(); });
    t.method("CreateHTML", [](G4UImanager* a)->void { a->CreateHTML(); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::LoopS(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::LoopS(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:143:10
    t.method("LoopS", static_cast<void (G4UImanager::*)(const char *) >(&G4UImanager::LoopS));

    DEBUG_MSG("Adding wrapper for void G4UImanager::ForeachS(const char *) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::ForeachS(const char *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:144:10
    t.method("ForeachS", static_cast<void (G4UImanager::*)(const char *) >(&G4UImanager::ForeachS));

    DEBUG_MSG("Adding wrapper for G4bool G4UImanager::Notify(G4ApplicationState) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4UImanager::Notify(G4ApplicationState)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:147:12
    t.method("Notify", static_cast<G4bool (G4UImanager::*)(G4ApplicationState) >(&G4UImanager::Notify));

    DEBUG_MSG("Adding wrapper for G4String G4UImanager::GetCurrentStringValue(const char *, G4int, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4String G4UImanager::GetCurrentStringValue(const char *, G4int, G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:157:14
    t.method("GetCurrentStringValue", static_cast<G4String (G4UImanager::*)(const char *, G4int, G4bool) >(&G4UImanager::GetCurrentStringValue));
    t.method("GetCurrentStringValue", [](G4UImanager& a, const char * arg0)->G4String { return a.GetCurrentStringValue(arg0); });
    t.method("GetCurrentStringValue", [](G4UImanager& a, const char * arg0, G4int arg1)->G4String { return a.GetCurrentStringValue(arg0, arg1); });
    t.method("GetCurrentStringValue", [](G4UImanager* a, const char * arg0)->G4String { return a->GetCurrentStringValue(arg0); });
    t.method("GetCurrentStringValue", [](G4UImanager* a, const char * arg0, G4int arg1)->G4String { return a->GetCurrentStringValue(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for G4int G4UImanager::GetCurrentIntValue(const char *, G4int, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4int G4UImanager::GetCurrentIntValue(const char *, G4int, G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:159:11
    t.method("GetCurrentIntValue", static_cast<G4int (G4UImanager::*)(const char *, G4int, G4bool) >(&G4UImanager::GetCurrentIntValue));
    t.method("GetCurrentIntValue", [](G4UImanager& a, const char * arg0)->G4int { return a.GetCurrentIntValue(arg0); });
    t.method("GetCurrentIntValue", [](G4UImanager& a, const char * arg0, G4int arg1)->G4int { return a.GetCurrentIntValue(arg0, arg1); });
    t.method("GetCurrentIntValue", [](G4UImanager* a, const char * arg0)->G4int { return a->GetCurrentIntValue(arg0); });
    t.method("GetCurrentIntValue", [](G4UImanager* a, const char * arg0, G4int arg1)->G4int { return a->GetCurrentIntValue(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for G4double G4UImanager::GetCurrentDoubleValue(const char *, G4int, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4UImanager::GetCurrentDoubleValue(const char *, G4int, G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:160:14
    t.method("GetCurrentDoubleValue", static_cast<G4double (G4UImanager::*)(const char *, G4int, G4bool) >(&G4UImanager::GetCurrentDoubleValue));
    t.method("GetCurrentDoubleValue", [](G4UImanager& a, const char * arg0)->G4double { return a.GetCurrentDoubleValue(arg0); });
    t.method("GetCurrentDoubleValue", [](G4UImanager& a, const char * arg0, G4int arg1)->G4double { return a.GetCurrentDoubleValue(arg0, arg1); });
    t.method("GetCurrentDoubleValue", [](G4UImanager* a, const char * arg0)->G4double { return a->GetCurrentDoubleValue(arg0); });
    t.method("GetCurrentDoubleValue", [](G4UImanager* a, const char * arg0, G4int arg1)->G4double { return a->GetCurrentDoubleValue(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for G4String G4UImanager::GetCurrentStringValue(const char *, const char *, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4String G4UImanager::GetCurrentStringValue(const char *, const char *, G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:162:14
    t.method("GetCurrentStringValue", static_cast<G4String (G4UImanager::*)(const char *, const char *, G4bool) >(&G4UImanager::GetCurrentStringValue));
    t.method("GetCurrentStringValue", [](G4UImanager& a, const char * arg0, const char * arg1)->G4String { return a.GetCurrentStringValue(arg0, arg1); });
    t.method("GetCurrentStringValue", [](G4UImanager* a, const char * arg0, const char * arg1)->G4String { return a->GetCurrentStringValue(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for G4int G4UImanager::GetCurrentIntValue(const char *, const char *, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4int G4UImanager::GetCurrentIntValue(const char *, const char *, G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:164:11
    t.method("GetCurrentIntValue", static_cast<G4int (G4UImanager::*)(const char *, const char *, G4bool) >(&G4UImanager::GetCurrentIntValue));
    t.method("GetCurrentIntValue", [](G4UImanager& a, const char * arg0, const char * arg1)->G4int { return a.GetCurrentIntValue(arg0, arg1); });
    t.method("GetCurrentIntValue", [](G4UImanager* a, const char * arg0, const char * arg1)->G4int { return a->GetCurrentIntValue(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for G4double G4UImanager::GetCurrentDoubleValue(const char *, const char *, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4UImanager::GetCurrentDoubleValue(const char *, const char *, G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:165:14
    t.method("GetCurrentDoubleValue", static_cast<G4double (G4UImanager::*)(const char *, const char *, G4bool) >(&G4UImanager::GetCurrentDoubleValue));
    t.method("GetCurrentDoubleValue", [](G4UImanager& a, const char * arg0, const char * arg1)->G4double { return a.GetCurrentDoubleValue(arg0, arg1); });
    t.method("GetCurrentDoubleValue", [](G4UImanager* a, const char * arg0, const char * arg1)->G4double { return a->GetCurrentDoubleValue(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetPauseAtBeginOfEvent(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetPauseAtBeginOfEvent(G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:172:17
    t.method("SetPauseAtBeginOfEvent", static_cast<void (G4UImanager::*)(G4bool) >(&G4UImanager::SetPauseAtBeginOfEvent));

    DEBUG_MSG("Adding wrapper for G4bool G4UImanager::GetPauseAtBeginOfEvent() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4UImanager::GetPauseAtBeginOfEvent()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:173:19
    t.method("GetPauseAtBeginOfEvent", static_cast<G4bool (G4UImanager::*)()  const>(&G4UImanager::GetPauseAtBeginOfEvent));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetPauseAtEndOfEvent(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetPauseAtEndOfEvent(G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:174:17
    t.method("SetPauseAtEndOfEvent", static_cast<void (G4UImanager::*)(G4bool) >(&G4UImanager::SetPauseAtEndOfEvent));

    DEBUG_MSG("Adding wrapper for G4bool G4UImanager::GetPauseAtEndOfEvent() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4UImanager::GetPauseAtEndOfEvent()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:175:19
    t.method("GetPauseAtEndOfEvent", static_cast<G4bool (G4UImanager::*)()  const>(&G4UImanager::GetPauseAtEndOfEvent));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetVerboseLevel(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetVerboseLevel(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:192:17
    t.method("SetVerboseLevel", static_cast<void (G4UImanager::*)(G4int) >(&G4UImanager::SetVerboseLevel));

    DEBUG_MSG("Adding wrapper for G4int G4UImanager::GetVerboseLevel() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4UImanager::GetVerboseLevel()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:193:18
    t.method("GetVerboseLevel", static_cast<G4int (G4UImanager::*)()  const>(&G4UImanager::GetVerboseLevel));

    DEBUG_MSG("Adding wrapper for G4int G4UImanager::GetNumberOfHistory() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4UImanager::GetNumberOfHistory()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:194:18
    t.method("GetNumberOfHistory", static_cast<G4int (G4UImanager::*)()  const>(&G4UImanager::GetNumberOfHistory));

    DEBUG_MSG("Adding wrapper for G4String G4UImanager::GetPreviousCommand(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4String G4UImanager::GetPreviousCommand(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:195:21
    t.method("GetPreviousCommand", static_cast<G4String (G4UImanager::*)(G4int)  const>(&G4UImanager::GetPreviousCommand));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetMaxHistSize(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetMaxHistSize(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:203:17
    t.method("SetMaxHistSize", static_cast<void (G4UImanager::*)(G4int) >(&G4UImanager::SetMaxHistSize));

    DEBUG_MSG("Adding wrapper for G4int G4UImanager::GetMaxHistSize() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4UImanager::GetMaxHistSize()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:204:18
    t.method("GetMaxHistSize", static_cast<G4int (G4UImanager::*)()  const>(&G4UImanager::GetMaxHistSize));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetMacroSearchPath(const G4String &) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetMacroSearchPath(const G4String &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:206:17
    t.method("SetMacroSearchPath", static_cast<void (G4UImanager::*)(const G4String &) >(&G4UImanager::SetMacroSearchPath));

    DEBUG_MSG("Adding wrapper for const G4String & G4UImanager::GetMacroSearchPath() (" __HERE__ ")");
    // signature to use in the veto list: const G4String & G4UImanager::GetMacroSearchPath()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:207:28
    t.method("GetMacroSearchPath", static_cast<const G4String & (G4UImanager::*)()  const>(&G4UImanager::GetMacroSearchPath));

    DEBUG_MSG("Adding wrapper for void G4UImanager::ParseMacroSearchPath() (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::ParseMacroSearchPath()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:208:10
    t.method("ParseMacroSearchPath", static_cast<void (G4UImanager::*)() >(&G4UImanager::ParseMacroSearchPath));

    DEBUG_MSG("Adding wrapper for G4String G4UImanager::FindMacroPath(const G4String &) (" __HERE__ ")");
    // signature to use in the veto list: G4String G4UImanager::FindMacroPath(const G4String &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:209:14
    t.method("FindMacroPath", static_cast<G4String (G4UImanager::*)(const G4String &)  const>(&G4UImanager::FindMacroPath));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetMasterUIManager(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetMasterUIManager(G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:211:17
    t.method("SetMasterUIManager", static_cast<void (G4UImanager::*)(G4bool) >(&G4UImanager::SetMasterUIManager));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetIgnoreCmdNotFound(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetIgnoreCmdNotFound(G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:220:17
    t.method("SetIgnoreCmdNotFound", static_cast<void (G4UImanager::*)(G4bool) >(&G4UImanager::SetIgnoreCmdNotFound));

    DEBUG_MSG("Adding wrapper for std::vector<G4String> * G4UImanager::GetCommandStack() (" __HERE__ ")");
    // signature to use in the veto list: std::vector<G4String> * G4UImanager::GetCommandStack()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:222:28
    t.method("GetCommandStack", static_cast<std::vector<G4String> * (G4UImanager::*)() >(&G4UImanager::GetCommandStack));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetUpForAThread(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetUpForAThread(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:226:10
    t.method("SetUpForAThread", static_cast<void (G4UImanager::*)(G4int) >(&G4UImanager::SetUpForAThread));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetUpForSpecialThread(const G4String &) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetUpForSpecialThread(const G4String &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:228:10
    t.method("SetUpForSpecialThread", static_cast<void (G4UImanager::*)(const G4String &) >(&G4UImanager::SetUpForSpecialThread));

    DEBUG_MSG("Adding wrapper for G4int G4UImanager::GetThreadID() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4UImanager::GetThreadID()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:230:18
    t.method("GetThreadID", static_cast<G4int (G4UImanager::*)()  const>(&G4UImanager::GetThreadID));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetCoutFileName(const G4String &, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetCoutFileName(const G4String &, G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:232:10
    t.method("SetCoutFileName", static_cast<void (G4UImanager::*)(const G4String &, G4bool) >(&G4UImanager::SetCoutFileName));
    t.method("SetCoutFileName", [](G4UImanager& a)->void { a.SetCoutFileName(); });
    t.method("SetCoutFileName", [](G4UImanager& a, const G4String & arg0)->void { a.SetCoutFileName(arg0); });
    t.method("SetCoutFileName", [](G4UImanager* a)->void { a->SetCoutFileName(); });
    t.method("SetCoutFileName", [](G4UImanager* a, const G4String & arg0)->void { a->SetCoutFileName(arg0); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetCerrFileName(const G4String &, G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetCerrFileName(const G4String &, G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:233:10
    t.method("SetCerrFileName", static_cast<void (G4UImanager::*)(const G4String &, G4bool) >(&G4UImanager::SetCerrFileName));
    t.method("SetCerrFileName", [](G4UImanager& a)->void { a.SetCerrFileName(); });
    t.method("SetCerrFileName", [](G4UImanager& a, const G4String & arg0)->void { a.SetCerrFileName(arg0); });
    t.method("SetCerrFileName", [](G4UImanager* a)->void { a->SetCerrFileName(); });
    t.method("SetCerrFileName", [](G4UImanager* a, const G4String & arg0)->void { a->SetCerrFileName(arg0); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetThreadPrefixString(const G4String &) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetThreadPrefixString(const G4String &)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:234:10
    t.method("SetThreadPrefixString", static_cast<void (G4UImanager::*)(const G4String &) >(&G4UImanager::SetThreadPrefixString));
    t.method("SetThreadPrefixString", [](G4UImanager& a)->void { a.SetThreadPrefixString(); });
    t.method("SetThreadPrefixString", [](G4UImanager* a)->void { a->SetThreadPrefixString(); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetThreadUseBuffer(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetThreadUseBuffer(G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:235:10
    t.method("SetThreadUseBuffer", static_cast<void (G4UImanager::*)(G4bool) >(&G4UImanager::SetThreadUseBuffer));
    t.method("SetThreadUseBuffer", [](G4UImanager& a)->void { a.SetThreadUseBuffer(); });
    t.method("SetThreadUseBuffer", [](G4UImanager* a)->void { a->SetThreadUseBuffer(); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetThreadIgnore(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetThreadIgnore(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:236:10
    t.method("SetThreadIgnore", static_cast<void (G4UImanager::*)(G4int) >(&G4UImanager::SetThreadIgnore));
    t.method("SetThreadIgnore", [](G4UImanager& a)->void { a.SetThreadIgnore(); });
    t.method("SetThreadIgnore", [](G4UImanager* a)->void { a->SetThreadIgnore(); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetThreadIgnoreInit(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetThreadIgnoreInit(G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:237:10
    t.method("SetThreadIgnoreInit", static_cast<void (G4UImanager::*)(G4bool) >(&G4UImanager::SetThreadIgnoreInit));
    t.method("SetThreadIgnoreInit", [](G4UImanager& a)->void { a.SetThreadIgnoreInit(); });
    t.method("SetThreadIgnoreInit", [](G4UImanager* a)->void { a->SetThreadIgnoreInit(); });

    DEBUG_MSG("Adding wrapper for void G4UImanager::UseDoublePrecisionStr(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::UseDoublePrecisionStr(G4bool)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:240:17
    module_.method("G4UImanager!UseDoublePrecisionStr", static_cast<void (*)(G4bool) >(&G4UImanager::UseDoublePrecisionStr));

    DEBUG_MSG("Adding wrapper for G4bool G4UImanager::DoublePrecisionStr() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4UImanager::DoublePrecisionStr()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:241:19
    module_.method("G4UImanager!DoublePrecisionStr", static_cast<G4bool (*)() >(&G4UImanager::DoublePrecisionStr));

    DEBUG_MSG("Adding wrapper for G4int G4UImanager::GetLastReturnCode() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4UImanager::GetLastReturnCode()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:243:18
    t.method("GetLastReturnCode", static_cast<G4int (G4UImanager::*)()  const>(&G4UImanager::GetLastReturnCode));

    DEBUG_MSG("Adding wrapper for bool G4UImanager::IsLastCommandOutputTreated() (" __HERE__ ")");
    // signature to use in the veto list: bool G4UImanager::IsLastCommandOutputTreated()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:245:17
    t.method("IsLastCommandOutputTreated", static_cast<bool (G4UImanager::*)() >(&G4UImanager::IsLastCommandOutputTreated));

    DEBUG_MSG("Adding wrapper for void G4UImanager::SetLastCommandOutputTreated() (" __HERE__ ")");
    // signature to use in the veto list: void G4UImanager::SetLastCommandOutputTreated()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4UImanager.hh:246:17
    t.method("SetLastCommandOutputTreated", static_cast<void (G4UImanager::*)() >(&G4UImanager::SetLastCommandOutputTreated));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4UImanager>> type_;
};
std::shared_ptr<Wrapper> newJlG4UImanager(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4UImanager(module));
}

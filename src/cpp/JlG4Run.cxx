// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4Run> : std::false_type { };
  template<> struct DefaultConstructible<G4Run> : std::false_type { };
}

// Class generating the wrapper for type G4Run
// signature to use in the veto file: G4Run
struct JlG4Run: public Wrapper {

  JlG4Run(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4Run (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:47:7
    jlcxx::TypeWrapper<G4Run>  t = jlModule.add_type<G4Run>("G4Run");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4Run>>(new jlcxx::TypeWrapper<G4Run>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void G4Run::RecordEvent(const G4Event *) (" __HERE__ ")");
    // signature to use in the veto list: void G4Run::RecordEvent(const G4Event *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:59:18
    t.method("RecordEvent", static_cast<void (G4Run::*)(const G4Event *) >(&G4Run::RecordEvent));

    DEBUG_MSG("Adding wrapper for void G4Run::Merge(const G4Run *) (" __HERE__ ")");
    // signature to use in the veto list: void G4Run::Merge(const G4Run *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:63:18
    t.method("Merge", static_cast<void (G4Run::*)(const G4Run *) >(&G4Run::Merge));

    DEBUG_MSG("Adding wrapper for void G4Run::MergeSubEvent(G4Event *, const G4Event *) (" __HERE__ ")");
    // signature to use in the veto list: void G4Run::MergeSubEvent(G4Event *, const G4Event *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:70:18
    t.method("MergeSubEvent", static_cast<void (G4Run::*)(G4Event *, const G4Event *) >(&G4Run::MergeSubEvent));

    DEBUG_MSG("Adding wrapper for void G4Run::StoreEvent(G4Event *) (" __HERE__ ")");
    // signature to use in the veto list: void G4Run::StoreEvent(G4Event *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:79:10
    t.method("StoreEvent", static_cast<void (G4Run::*)(G4Event *) >(&G4Run::StoreEvent));

    DEBUG_MSG("Adding wrapper for G4int G4Run::GetRunID() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4Run::GetRunID()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:82:18
    t.method("GetRunID", static_cast<G4int (G4Run::*)()  const>(&G4Run::GetRunID));

    DEBUG_MSG("Adding wrapper for G4int G4Run::GetNumberOfEvent() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4Run::GetNumberOfEvent()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:86:18
    t.method("GetNumberOfEvent", static_cast<G4int (G4Run::*)()  const>(&G4Run::GetNumberOfEvent));

    DEBUG_MSG("Adding wrapper for G4int G4Run::GetNumberOfEventToBeProcessed() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4Run::GetNumberOfEventToBeProcessed()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:88:18
    t.method("GetNumberOfEventToBeProcessed", static_cast<G4int (G4Run::*)()  const>(&G4Run::GetNumberOfEventToBeProcessed));

    DEBUG_MSG("Adding wrapper for const G4HCtable * G4Run::GetHCtable() (" __HERE__ ")");
    // signature to use in the veto list: const G4HCtable * G4Run::GetHCtable()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:91:29
    t.method("GetHCtable", static_cast<const G4HCtable * (G4Run::*)()  const>(&G4Run::GetHCtable));

    DEBUG_MSG("Adding wrapper for const G4String & G4Run::GetRandomNumberStatus() (" __HERE__ ")");
    // signature to use in the veto list: const G4String & G4Run::GetRandomNumberStatus()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:97:28
    t.method("GetRandomNumberStatus", static_cast<const G4String & (G4Run::*)()  const>(&G4Run::GetRandomNumberStatus));

    DEBUG_MSG("Adding wrapper for std::vector<const G4Event *> * G4Run::GetEventVector() (" __HERE__ ")");
    // signature to use in the veto list: std::vector<const G4Event *> * G4Run::GetEventVector()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:100:41
    t.method("GetEventVector", static_cast<std::vector<const G4Event *> * (G4Run::*)()  const>(&G4Run::GetEventVector));

    DEBUG_MSG("Adding wrapper for G4int G4Run::GetEventVectorSize() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4Run::GetEventVectorSize()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:101:18
    t.method("GetEventVectorSize", static_cast<G4int (G4Run::*)()  const>(&G4Run::GetEventVectorSize));

    DEBUG_MSG("Adding wrapper for G4int G4Run::GetNumberOfKeptEvents() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4Run::GetNumberOfKeptEvents()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:103:11
    t.method("GetNumberOfKeptEvents", static_cast<G4int (G4Run::*)()  const>(&G4Run::GetNumberOfKeptEvents));

    DEBUG_MSG("Adding wrapper for void G4Run::SetRunID(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4Run::SetRunID(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:105:17
    t.method("SetRunID", static_cast<void (G4Run::*)(G4int) >(&G4Run::SetRunID));

    DEBUG_MSG("Adding wrapper for void G4Run::SetNumberOfEventToBeProcessed(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4Run::SetNumberOfEventToBeProcessed(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:106:17
    t.method("SetNumberOfEventToBeProcessed", static_cast<void (G4Run::*)(G4int) >(&G4Run::SetNumberOfEventToBeProcessed));

    DEBUG_MSG("Adding wrapper for void G4Run::SetHCtable(G4HCtable *) (" __HERE__ ")");
    // signature to use in the veto list: void G4Run::SetHCtable(G4HCtable *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:107:17
    t.method("SetHCtable", static_cast<void (G4Run::*)(G4HCtable *) >(&G4Run::SetHCtable));

    DEBUG_MSG("Adding wrapper for void G4Run::SetRandomNumberStatus(G4String &) (" __HERE__ ")");
    // signature to use in the veto list: void G4Run::SetRandomNumberStatus(G4String &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4Run.hh:109:17
    t.method("SetRandomNumberStatus", static_cast<void (G4Run::*)(G4String &) >(&G4Run::SetRandomNumberStatus));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4Run>> type_;
};
std::shared_ptr<Wrapper> newJlG4Run(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4Run(module));
}

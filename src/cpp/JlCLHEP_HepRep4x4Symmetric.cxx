// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<CLHEP::HepRep4x4Symmetric> : std::false_type { };
  template<> struct DefaultConstructible<CLHEP::HepRep4x4Symmetric> : std::false_type { };
}

// Class generating the wrapper for type CLHEP::HepRep4x4Symmetric
// signature to use in the veto file: CLHEP::HepRep4x4Symmetric
struct JlCLHEP_HepRep4x4Symmetric: public Wrapper {

  JlCLHEP_HepRep4x4Symmetric(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type CLHEP::HepRep4x4Symmetric (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/CLHEP/Vector/RotationInterfaces.h:366:8
    jlcxx::TypeWrapper<CLHEP::HepRep4x4Symmetric>  t = jlModule.add_type<CLHEP::HepRep4x4Symmetric>("CLHEP!HepRep4x4Symmetric");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<CLHEP::HepRep4x4Symmetric>>(new jlcxx::TypeWrapper<CLHEP::HepRep4x4Symmetric>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<CLHEP::HepRep4x4Symmetric>> type_;
};
std::shared_ptr<Wrapper> newJlCLHEP_HepRep4x4Symmetric(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlCLHEP_HepRep4x4Symmetric(module));
}

// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4JLMagField> : std::false_type { };
  template<> struct DefaultConstructible<G4JLMagField> : std::false_type { };
template<> struct SuperType<G4JLMagField> { typedef G4MagneticField type; };
}

// Class generating the wrapper for type G4JLMagField
// signature to use in the veto file: G4JLMagField
struct JlG4JLMagField: public Wrapper {

  JlG4JLMagField(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4JLMagField (" __HERE__ ")");
    // defined in cpp/Geant4Wrap.h:160:7
    jlcxx::TypeWrapper<G4JLMagField>  t = jlModule.add_type<G4JLMagField>("G4JLMagField",
      jlcxx::julia_base_type<G4MagneticField>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4JLMagField>>(new jlcxx::TypeWrapper<G4JLMagField>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4JLMagField::G4JLMagField(getfield_f, void *) (" __HERE__ ")");
    // defined in cpp/Geant4Wrap.h:162:3
    t.constructor<getfield_f, void *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("f"), jlcxx::arg("d")    );

    DEBUG_MSG("Adding wrapper for void G4JLMagField::GetFieldValue(const G4double[3], G4double *) (" __HERE__ ")");
    // signature to use in the veto list: void G4JLMagField::GetFieldValue(const G4double[3], G4double *)
    // defined in cpp/Geant4Wrap.h:164:8
    t.method("GetFieldValue", [](G4JLMagField const& a, const G4double arg0[3], G4double * arg1)->void { a.GetFieldValue(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("point"), jlcxx::arg("field"));
    t.method("GetFieldValue", [](G4JLMagField const* a, const G4double arg0[3], G4double * arg1)->void { a->GetFieldValue(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("point"), jlcxx::arg("field"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4JLMagField>> type_;
};
std::shared_ptr<Wrapper> newJlG4JLMagField(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4JLMagField(module));
}

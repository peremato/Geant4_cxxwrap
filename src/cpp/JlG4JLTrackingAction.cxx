// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4JLTrackingAction> : std::false_type { };
  template<> struct DefaultConstructible<G4JLTrackingAction> : std::false_type { };
template<> struct SuperType<G4JLTrackingAction> { typedef G4UserTrackingAction type; };
}

// Class generating the wrapper for type G4JLTrackingAction
// signature to use in the veto file: G4JLTrackingAction
struct JlG4JLTrackingAction: public Wrapper {

  JlG4JLTrackingAction(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4JLTrackingAction (" __HERE__ ")");
    // defined in cpp/Geant4Wrap.h:184:7
    jlcxx::TypeWrapper<G4JLTrackingAction>  t = jlModule.add_type<G4JLTrackingAction>("G4JLTrackingAction",
      jlcxx::julia_base_type<G4UserTrackingAction>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4JLTrackingAction>>(new jlcxx::TypeWrapper<G4JLTrackingAction>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void G4JLTrackingAction::G4JLTrackingAction(trackaction_f, void *, trackaction_f, void *) (" __HERE__ ")");
    // defined in cpp/Geant4Wrap.h:186:5
    t.constructor<trackaction_f>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("pre")    );
    t.constructor<trackaction_f, void *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("pre"), jlcxx::arg("pre_d")    );
    t.constructor<trackaction_f, void *, trackaction_f>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("pre"), jlcxx::arg("pre_d"), jlcxx::arg("post")    );
    t.constructor<trackaction_f, void *, trackaction_f, void *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("pre"), jlcxx::arg("pre_d"), jlcxx::arg("post"), jlcxx::arg("post_d")    );

    DEBUG_MSG("Adding wrapper for void G4JLTrackingAction::PreUserTrackingAction(const G4Track *) (" __HERE__ ")");
    // signature to use in the veto list: void G4JLTrackingAction::PreUserTrackingAction(const G4Track *)
    // defined in cpp/Geant4Wrap.h:190:10
    t.method("PreUserTrackingAction", [](G4JLTrackingAction& a, const G4Track * arg0)->void { a.PreUserTrackingAction(arg0); }, jlcxx::arg("this"), jlcxx::arg("track"));
    t.method("PreUserTrackingAction", [](G4JLTrackingAction* a, const G4Track * arg0)->void { a->PreUserTrackingAction(arg0); }, jlcxx::arg("this"), jlcxx::arg("track"));

    DEBUG_MSG("Adding wrapper for void G4JLTrackingAction::PostUserTrackingAction(const G4Track *) (" __HERE__ ")");
    // signature to use in the veto list: void G4JLTrackingAction::PostUserTrackingAction(const G4Track *)
    // defined in cpp/Geant4Wrap.h:191:10
    t.method("PostUserTrackingAction", [](G4JLTrackingAction& a, const G4Track * arg0)->void { a.PostUserTrackingAction(arg0); }, jlcxx::arg("this"), jlcxx::arg("track"));
    t.method("PostUserTrackingAction", [](G4JLTrackingAction* a, const G4Track * arg0)->void { a->PostUserTrackingAction(arg0); }, jlcxx::arg("this"), jlcxx::arg("track"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4JLTrackingAction>> type_;
};
std::shared_ptr<Wrapper> newJlG4JLTrackingAction(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4JLTrackingAction(module));
}

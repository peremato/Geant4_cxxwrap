// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4PVReplica> : std::false_type { };
  template<> struct DefaultConstructible<G4PVReplica> : std::false_type { };
template<> struct SuperType<G4PVReplica> { typedef G4VPhysicalVolume type; };
}

// Class generating the wrapper for type G4PVReplica
// signature to use in the veto file: G4PVReplica
struct JlG4PVReplica: public Wrapper {

  JlG4PVReplica(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4PVReplica (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:89:7
    jlcxx::TypeWrapper<G4PVReplica>  t = jlModule.add_type<G4PVReplica>("G4PVReplica",
      jlcxx::julia_base_type<G4VPhysicalVolume>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4PVReplica>>(new jlcxx::TypeWrapper<G4PVReplica>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void G4PVReplica::G4PVReplica(const G4String &, G4LogicalVolume *, G4LogicalVolume *, const EAxis, const G4int, const G4double, const G4double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:93:5
    t.constructor<const G4String &, G4LogicalVolume *, G4LogicalVolume *, const EAxis, const G4int, const G4double>(/*finalize=*/jlcxx::finalize_policy::no);
    t.constructor<const G4String &, G4LogicalVolume *, G4LogicalVolume *, const EAxis, const G4int, const G4double, const G4double>(/*finalize=*/jlcxx::finalize_policy::no);


    DEBUG_MSG("Adding wrapper for void G4PVReplica::G4PVReplica(const G4String &, G4LogicalVolume *, G4VPhysicalVolume *, const EAxis, const G4int, const G4double, const G4double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:101:5
    t.constructor<const G4String &, G4LogicalVolume *, G4VPhysicalVolume *, const EAxis, const G4int, const G4double>(/*finalize=*/jlcxx::finalize_policy::no);
    t.constructor<const G4String &, G4LogicalVolume *, G4VPhysicalVolume *, const EAxis, const G4int, const G4double, const G4double>(/*finalize=*/jlcxx::finalize_policy::no);

    DEBUG_MSG("Adding wrapper for EVolume G4PVReplica::VolumeType() (" __HERE__ ")");
    // signature to use in the veto list: EVolume G4PVReplica::VolumeType()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:120:13
    t.method("VolumeType", static_cast<EVolume (G4PVReplica::*)()  const>(&G4PVReplica::VolumeType));

    DEBUG_MSG("Adding wrapper for G4bool G4PVReplica::IsMany() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4PVReplica::IsMany()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:122:12
    t.method("IsMany", static_cast<G4bool (G4PVReplica::*)()  const>(&G4PVReplica::IsMany));

    DEBUG_MSG("Adding wrapper for G4bool G4PVReplica::IsReplicated() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4PVReplica::IsReplicated()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:123:12
    t.method("IsReplicated", static_cast<G4bool (G4PVReplica::*)()  const>(&G4PVReplica::IsReplicated));

    DEBUG_MSG("Adding wrapper for G4int G4PVReplica::GetCopyNo() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4PVReplica::GetCopyNo()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:125:11
    t.method("GetCopyNo", static_cast<G4int (G4PVReplica::*)()  const>(&G4PVReplica::GetCopyNo));

    DEBUG_MSG("Adding wrapper for void G4PVReplica::SetCopyNo(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4PVReplica::SetCopyNo(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:126:11
    t.method("SetCopyNo", static_cast<void (G4PVReplica::*)(G4int) >(&G4PVReplica::SetCopyNo));

    DEBUG_MSG("Adding wrapper for G4bool G4PVReplica::IsParameterised() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4PVReplica::IsParameterised()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:127:12
    t.method("IsParameterised", static_cast<G4bool (G4PVReplica::*)()  const>(&G4PVReplica::IsParameterised));

    DEBUG_MSG("Adding wrapper for G4VPVParameterisation * G4PVReplica::GetParameterisation() (" __HERE__ ")");
    // signature to use in the veto list: G4VPVParameterisation * G4PVReplica::GetParameterisation()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:128:28
    t.method("GetParameterisation", static_cast<G4VPVParameterisation * (G4PVReplica::*)()  const>(&G4PVReplica::GetParameterisation));

    DEBUG_MSG("Adding wrapper for G4int G4PVReplica::GetMultiplicity() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4PVReplica::GetMultiplicity()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:129:11
    t.method("GetMultiplicity", static_cast<G4int (G4PVReplica::*)()  const>(&G4PVReplica::GetMultiplicity));

    DEBUG_MSG("Adding wrapper for void G4PVReplica::GetReplicationData(EAxis &, G4int &, G4double &, G4double &, G4bool &) (" __HERE__ ")");
    // signature to use in the veto list: void G4PVReplica::GetReplicationData(EAxis &, G4int &, G4double &, G4double &, G4bool &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:130:10
    t.method("GetReplicationData", static_cast<void (G4PVReplica::*)(EAxis &, G4int &, G4double &, G4double &, G4bool &)  const>(&G4PVReplica::GetReplicationData));

    DEBUG_MSG("Adding wrapper for void G4PVReplica::SetRegularStructureId(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4PVReplica::SetRegularStructureId(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:136:18
    t.method("SetRegularStructureId", static_cast<void (G4PVReplica::*)(G4int) >(&G4PVReplica::SetRegularStructureId));

    DEBUG_MSG("Adding wrapper for G4bool G4PVReplica::IsRegularStructure() (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4PVReplica::IsRegularStructure()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:142:12
    t.method("IsRegularStructure", static_cast<G4bool (G4PVReplica::*)()  const>(&G4PVReplica::IsRegularStructure));

    DEBUG_MSG("Adding wrapper for G4int G4PVReplica::GetRegularStructureId() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4PVReplica::GetRegularStructureId()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:143:11
    t.method("GetRegularStructureId", static_cast<G4int (G4PVReplica::*)()  const>(&G4PVReplica::GetRegularStructureId));

    DEBUG_MSG("Adding wrapper for G4int G4PVReplica::GetInstanceID() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4PVReplica::GetInstanceID()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:148:18
    t.method("GetInstanceID", static_cast<G4int (G4PVReplica::*)()  const>(&G4PVReplica::GetInstanceID));

    DEBUG_MSG("Adding wrapper for void G4PVReplica::InitialiseWorker(G4PVReplica *) (" __HERE__ ")");
    // signature to use in the veto list: void G4PVReplica::InitialiseWorker(G4PVReplica *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:154:10
    t.method("InitialiseWorker", static_cast<void (G4PVReplica::*)(G4PVReplica *) >(&G4PVReplica::InitialiseWorker));

    DEBUG_MSG("Adding wrapper for void G4PVReplica::TerminateWorker(G4PVReplica *) (" __HERE__ ")");
    // signature to use in the veto list: void G4PVReplica::TerminateWorker(G4PVReplica *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4PVReplica.hh:158:10
    t.method("TerminateWorker", static_cast<void (G4PVReplica::*)(G4PVReplica *) >(&G4PVReplica::TerminateWorker));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4PVReplica>> type_;
};
std::shared_ptr<Wrapper> newJlG4PVReplica(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4PVReplica(module));
}

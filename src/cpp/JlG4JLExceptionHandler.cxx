// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4JLExceptionHandler> : std::false_type { };
  template<> struct DefaultConstructible<G4JLExceptionHandler> : std::false_type { };
template<> struct SuperType<G4JLExceptionHandler> { typedef G4VExceptionHandler type; };
}

// Class generating the wrapper for type G4JLExceptionHandler
// signature to use in the veto file: G4JLExceptionHandler
struct JlG4JLExceptionHandler: public Wrapper {

  JlG4JLExceptionHandler(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4JLExceptionHandler (" __HERE__ ")");
    // defined in ./cpp/Geant4Wrap.h:32:7
    jlcxx::TypeWrapper<G4JLExceptionHandler>  t = jlModule.add_type<G4JLExceptionHandler>("G4JLExceptionHandler",
      jlcxx::julia_base_type<G4VExceptionHandler>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4JLExceptionHandler>>(new jlcxx::TypeWrapper<G4JLExceptionHandler>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for G4bool G4JLExceptionHandler::Notify(const char *, const char *, G4ExceptionSeverity, const char *) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4JLExceptionHandler::Notify(const char *, const char *, G4ExceptionSeverity, const char *)
    // defined in ./cpp/Geant4Wrap.h:36:10
    t.method("Notify", static_cast<G4bool (G4JLExceptionHandler::*)(const char *, const char *, G4ExceptionSeverity, const char *) >(&G4JLExceptionHandler::Notify));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4JLExceptionHandler>> type_;
};
std::shared_ptr<Wrapper> newJlG4JLExceptionHandler(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4JLExceptionHandler(module));
}

// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<HepGeom::TranslateY3D> : std::false_type { };
  template<> struct DefaultConstructible<HepGeom::TranslateY3D> : std::false_type { };
template<> struct SuperType<HepGeom::TranslateY3D> { typedef HepGeom::Translate3D type; };
}

// Class generating the wrapper for type HepGeom::TranslateY3D
// signature to use in the veto file: HepGeom::TranslateY3D
struct JlHepGeom_TranslateY3D: public Wrapper {

  JlHepGeom_TranslateY3D(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepGeom::TranslateY3D (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/CLHEP/Geometry/Transform3D.h:566:9
    jlcxx::TypeWrapper<HepGeom::TranslateY3D>  t = jlModule.add_type<HepGeom::TranslateY3D>("HepGeom!TranslateY3D",
      jlcxx::julia_base_type<HepGeom::Translate3D>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<HepGeom::TranslateY3D>>(new jlcxx::TypeWrapper<HepGeom::TranslateY3D>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void HepGeom::TranslateY3D::TranslateY3D(double) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/CLHEP/Geometry/Transform3D.h:574:5
    t.constructor<double>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<HepGeom::TranslateY3D>> type_;
};
std::shared_ptr<Wrapper> newJlHepGeom_TranslateY3D(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepGeom_TranslateY3D(module));
}

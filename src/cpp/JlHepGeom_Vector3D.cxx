// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {

  template<typename T>
  struct BuildParameterList<HepGeom::Vector3D<T>>
  {
    typedef ParameterList<T> type;
  };

  template<typename T> struct IsMirroredType<HepGeom::Vector3D<T>> : std::false_type { };
  template<typename T> struct DefaultConstructible<HepGeom::Vector3D<T>> : std::false_type { };
}

// Class generating the wrapper for type HepGeom::Vector3D
// signature to use in the veto file: HepGeom::Vector3D
struct JlHepGeom_Vector3D: public Wrapper {

  JlHepGeom_Vector3D(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type HepGeom::Vector3D (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/CLHEP/Geometry/Vector3D.h:33:9
    jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>  t =  jlModule.add_type<jlcxx::Parametric<jlcxx::TypeVar<1>>>("HepGeom!Vector3D");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>>(new jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>(jlModule, t));
    t.constructor<>(/*finalize=*/true);
    auto t41_decl_methods = [this]<typename T> (jlcxx::TypeWrapper<HepGeom::Vector3D<T>> wrapped){
      auto module_ = this->module_;
      wrapped.template constructor<>(/*finalize=*/true);
    };
    t.apply<HepGeom::Vector3D<double>>(t41_decl_methods);
  }

  void add_methods() const{
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<jlcxx::Parametric<jlcxx::TypeVar<1>>>> type_;
};
std::shared_ptr<Wrapper> newJlHepGeom_Vector3D(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlHepGeom_Vector3D(module));
}

// this file was auto-generated by wrapit v1.3.1-15-g5168a24
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4VTrajectory> : std::false_type { };
  template<> struct DefaultConstructible<G4VTrajectory> : std::false_type { };
}

// Class generating the wrapper for type G4VTrajectory
// signature to use in the veto file: G4VTrajectory
struct JlG4VTrajectory: public Wrapper {

  JlG4VTrajectory(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4VTrajectory (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:57:7
    jlcxx::TypeWrapper<G4VTrajectory>  t = jlModule.add_type<G4VTrajectory>("G4VTrajectory");
    jlcxx::stl::apply_stl<G4VTrajectory*>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4VTrajectory>>(new jlcxx::TypeWrapper<G4VTrajectory>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    module_.set_override_module(jl_base_module);

    DEBUG_MSG("Adding wrapper for G4bool G4VTrajectory::operator==(const G4VTrajectory &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4VTrajectory::operator==(const G4VTrajectory &)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:65:10
    t.method("==", static_cast<G4bool (G4VTrajectory::*)(const G4VTrajectory &)  const>(&G4VTrajectory::operator==));

    module_.unset_override_module();

    DEBUG_MSG("Adding wrapper for G4VTrajectory * G4VTrajectory::CloneForMaster() (" __HERE__ ")");
    // signature to use in the veto list: G4VTrajectory * G4VTrajectory::CloneForMaster()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:70:26
    t.method("CloneForMaster", static_cast<G4VTrajectory * (G4VTrajectory::*)()  const>(&G4VTrajectory::CloneForMaster));

    DEBUG_MSG("Adding wrapper for G4int G4VTrajectory::GetTrackID() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4VTrajectory::GetTrackID()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:73:17
    t.method("GetTrackID", static_cast<G4int (G4VTrajectory::*)()  const>(&G4VTrajectory::GetTrackID));

    DEBUG_MSG("Adding wrapper for G4int G4VTrajectory::GetParentID() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4VTrajectory::GetParentID()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:74:17
    t.method("GetParentID", static_cast<G4int (G4VTrajectory::*)()  const>(&G4VTrajectory::GetParentID));

    DEBUG_MSG("Adding wrapper for G4String G4VTrajectory::GetParticleName() (" __HERE__ ")");
    // signature to use in the veto list: G4String G4VTrajectory::GetParticleName()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:75:20
    t.method("GetParticleName", static_cast<G4String (G4VTrajectory::*)()  const>(&G4VTrajectory::GetParticleName));

    DEBUG_MSG("Adding wrapper for G4double G4VTrajectory::GetCharge() (" __HERE__ ")");
    // signature to use in the veto list: G4double G4VTrajectory::GetCharge()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:78:20
    t.method("GetCharge", static_cast<G4double (G4VTrajectory::*)()  const>(&G4VTrajectory::GetCharge));

    DEBUG_MSG("Adding wrapper for G4int G4VTrajectory::GetPDGEncoding() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4VTrajectory::GetPDGEncoding()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:81:17
    t.method("GetPDGEncoding", static_cast<G4int (G4VTrajectory::*)()  const>(&G4VTrajectory::GetPDGEncoding));

    DEBUG_MSG("Adding wrapper for G4ThreeVector G4VTrajectory::GetInitialMomentum() (" __HERE__ ")");
    // signature to use in the veto list: G4ThreeVector G4VTrajectory::GetInitialMomentum()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:84:25
    t.method("GetInitialMomentum", static_cast<G4ThreeVector (G4VTrajectory::*)()  const>(&G4VTrajectory::GetInitialMomentum));

    DEBUG_MSG("Adding wrapper for G4int G4VTrajectory::GetPointEntries() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4VTrajectory::GetPointEntries()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:87:17
    t.method("GetPointEntries", static_cast<G4int (G4VTrajectory::*)()  const>(&G4VTrajectory::GetPointEntries));

    DEBUG_MSG("Adding wrapper for G4VTrajectoryPoint * G4VTrajectory::GetPoint(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4VTrajectoryPoint * G4VTrajectory::GetPoint(G4int)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:90:31
    t.method("GetPoint", static_cast<G4VTrajectoryPoint * (G4VTrajectory::*)(G4int)  const>(&G4VTrajectory::GetPoint));

    DEBUG_MSG("Adding wrapper for void G4VTrajectory::DrawTrajectory() (" __HERE__ ")");
    // signature to use in the veto list: void G4VTrajectory::DrawTrajectory()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:101:16
    t.method("DrawTrajectory", static_cast<void (G4VTrajectory::*)()  const>(&G4VTrajectory::DrawTrajectory));

    DEBUG_MSG("Adding wrapper for std::vector<G4AttValue> * G4VTrajectory::CreateAttValues() (" __HERE__ ")");
    // signature to use in the veto list: std::vector<G4AttValue> * G4VTrajectory::CreateAttValues()
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:117:36
    t.method("CreateAttValues", static_cast<std::vector<G4AttValue> * (G4VTrajectory::*)()  const>(&G4VTrajectory::CreateAttValues));

    DEBUG_MSG("Adding wrapper for void G4VTrajectory::AppendStep(const G4Step *) (" __HERE__ ")");
    // signature to use in the veto list: void G4VTrajectory::AppendStep(const G4Step *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:120:16
    t.method("AppendStep", static_cast<void (G4VTrajectory::*)(const G4Step *) >(&G4VTrajectory::AppendStep));

    DEBUG_MSG("Adding wrapper for void G4VTrajectory::MergeTrajectory(G4VTrajectory *) (" __HERE__ ")");
    // signature to use in the veto list: void G4VTrajectory::MergeTrajectory(G4VTrajectory *)
    // defined in /Users/mato/.julia/artifacts/c08a070cdc1b892bb33db4924fdac1694e77d3a1/include/Geant4/G4VTrajectory.hh:121:16
    t.method("MergeTrajectory", static_cast<void (G4VTrajectory::*)(G4VTrajectory *) >(&G4VTrajectory::MergeTrajectory));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4VTrajectory>> type_;
};
std::shared_ptr<Wrapper> newJlG4VTrajectory(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4VTrajectory(module));
}

// this file was auto-generated by wrapit 
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4OpBoundaryProcess> : std::false_type { };
  template<> struct DefaultConstructible<G4OpBoundaryProcess> : std::false_type { };
}

// Class generating the wrapper for type G4OpBoundaryProcess
// signature to use in the veto file: G4OpBoundaryProcess
struct JlG4OpBoundaryProcess: public Wrapper {

  JlG4OpBoundaryProcess(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4OpBoundaryProcess (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:119:7
    jlcxx::TypeWrapper<G4OpBoundaryProcess>  t = jlModule.add_type<G4OpBoundaryProcess>("G4OpBoundaryProcess");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4OpBoundaryProcess>>(new jlcxx::TypeWrapper<G4OpBoundaryProcess>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void G4OpBoundaryProcess::G4OpBoundaryProcess(const G4String &, G4ProcessType) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:122:12
    t.constructor<const G4String &>(/*finalize=*/true);
    t.constructor<const G4String &, G4ProcessType>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for G4bool G4OpBoundaryProcess::IsApplicable(const G4ParticleDefinition &) (" __HERE__ ")");
    // signature to use in the veto list: G4bool G4OpBoundaryProcess::IsApplicable(const G4ParticleDefinition &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:126:18
    t.method("IsApplicable", static_cast<G4bool (G4OpBoundaryProcess::*)(const G4ParticleDefinition &) >(&G4OpBoundaryProcess::IsApplicable));

    DEBUG_MSG("Adding wrapper for G4double G4OpBoundaryProcess::GetMeanFreePath(const G4Track &, G4double, G4ForceCondition *) (" __HERE__ ")");
    // signature to use in the veto list: G4double G4OpBoundaryProcess::GetMeanFreePath(const G4Track &, G4double, G4ForceCondition *)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:130:20
    t.method("GetMeanFreePath", static_cast<G4double (G4OpBoundaryProcess::*)(const G4Track &, G4double, G4ForceCondition *) >(&G4OpBoundaryProcess::GetMeanFreePath));

    DEBUG_MSG("Adding wrapper for G4VParticleChange * G4OpBoundaryProcess::PostStepDoIt(const G4Track &, const G4Step &) (" __HERE__ ")");
    // signature to use in the veto list: G4VParticleChange * G4OpBoundaryProcess::PostStepDoIt(const G4Track &, const G4Step &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:136:22
    t.method("PostStepDoIt", static_cast<G4VParticleChange * (G4OpBoundaryProcess::*)(const G4Track &, const G4Step &) >(&G4OpBoundaryProcess::PostStepDoIt));

    DEBUG_MSG("Adding wrapper for G4OpBoundaryProcessStatus G4OpBoundaryProcess::GetStatus() (" __HERE__ ")");
    // signature to use in the veto list: G4OpBoundaryProcessStatus G4OpBoundaryProcess::GetStatus()
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:140:37
    t.method("GetStatus", static_cast<G4OpBoundaryProcessStatus (G4OpBoundaryProcess::*)()  const>(&G4OpBoundaryProcess::GetStatus));

    DEBUG_MSG("Adding wrapper for void G4OpBoundaryProcess::SetInvokeSD(G4bool) (" __HERE__ ")");
    // signature to use in the veto list: void G4OpBoundaryProcess::SetInvokeSD(G4bool)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:143:16
    t.method("SetInvokeSD", static_cast<void (G4OpBoundaryProcess::*)(G4bool) >(&G4OpBoundaryProcess::SetInvokeSD));

    DEBUG_MSG("Adding wrapper for void G4OpBoundaryProcess::PreparePhysicsTable(const G4ParticleDefinition &) (" __HERE__ ")");
    // signature to use in the veto list: void G4OpBoundaryProcess::PreparePhysicsTable(const G4ParticleDefinition &)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:146:16
    t.method("PreparePhysicsTable", static_cast<void (G4OpBoundaryProcess::*)(const G4ParticleDefinition &) >(&G4OpBoundaryProcess::PreparePhysicsTable));

    DEBUG_MSG("Adding wrapper for void G4OpBoundaryProcess::Initialise() (" __HERE__ ")");
    // signature to use in the veto list: void G4OpBoundaryProcess::Initialise()
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:148:16
    t.method("Initialise", static_cast<void (G4OpBoundaryProcess::*)() >(&G4OpBoundaryProcess::Initialise));

    DEBUG_MSG("Adding wrapper for void G4OpBoundaryProcess::SetVerboseLevel(G4int) (" __HERE__ ")");
    // signature to use in the veto list: void G4OpBoundaryProcess::SetVerboseLevel(G4int)
    // defined in /Users/mato/.julia/artifacts/4afb5743b029965f72ec5a970d92d5344ce830d2/include/Geant4/G4OpBoundaryProcess.hh:150:8
    t.method("SetVerboseLevel", static_cast<void (G4OpBoundaryProcess::*)(G4int) >(&G4OpBoundaryProcess::SetVerboseLevel));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4OpBoundaryProcess>> type_;
};
std::shared_ptr<Wrapper> newJlG4OpBoundaryProcess(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4OpBoundaryProcess(module));
}

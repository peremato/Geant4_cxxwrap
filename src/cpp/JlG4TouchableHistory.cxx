// this file was auto-generated by wrapit 5168a24-dirty
#include "Wrapper.h"

#include "jlGeant4.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<G4TouchableHistory> : std::false_type { };
  template<> struct DefaultConstructible<G4TouchableHistory> : std::false_type { };
}

// Class generating the wrapper for type G4TouchableHistory
// signature to use in the veto file: G4TouchableHistory
struct JlG4TouchableHistory: public Wrapper {

  JlG4TouchableHistory(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type G4TouchableHistory (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:103:7
    jlcxx::TypeWrapper<G4TouchableHistory>  t = jlModule.add_type<G4TouchableHistory>("G4TouchableHistory");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<G4TouchableHistory>>(new jlcxx::TypeWrapper<G4TouchableHistory>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void G4TouchableHistory::G4TouchableHistory(const G4NavigationHistory &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:112:5
    t.constructor<const G4NavigationHistory &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for G4VPhysicalVolume * G4TouchableHistory::GetVolume(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4VPhysicalVolume * G4TouchableHistory::GetVolume(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:118:39
    t.method("GetVolume", static_cast<G4VPhysicalVolume * (G4TouchableHistory::*)(G4int)  const>(&G4TouchableHistory::GetVolume));
    t.method("GetVolume", [](G4TouchableHistory const& a)->G4VPhysicalVolume * { return a.GetVolume(); });
    t.method("GetVolume", [](G4TouchableHistory const* a)->G4VPhysicalVolume * { return a->GetVolume(); });

    DEBUG_MSG("Adding wrapper for G4VSolid * G4TouchableHistory::GetSolid(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4VSolid * G4TouchableHistory::GetSolid(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:119:30
    t.method("GetSolid", static_cast<G4VSolid * (G4TouchableHistory::*)(G4int)  const>(&G4TouchableHistory::GetSolid));
    t.method("GetSolid", [](G4TouchableHistory const& a)->G4VSolid * { return a.GetSolid(); });
    t.method("GetSolid", [](G4TouchableHistory const* a)->G4VSolid * { return a->GetSolid(); });

    DEBUG_MSG("Adding wrapper for const G4ThreeVector & G4TouchableHistory::GetTranslation(G4int) (" __HERE__ ")");
    // signature to use in the veto list: const G4ThreeVector & G4TouchableHistory::GetTranslation(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:120:34
    t.method("GetTranslation", static_cast<const G4ThreeVector & (G4TouchableHistory::*)(G4int)  const>(&G4TouchableHistory::GetTranslation));
    t.method("GetTranslation", [](G4TouchableHistory const& a)->const G4ThreeVector & { return a.GetTranslation(); });
    t.method("GetTranslation", [](G4TouchableHistory const* a)->const G4ThreeVector & { return a->GetTranslation(); });

    DEBUG_MSG("Adding wrapper for const G4RotationMatrix * G4TouchableHistory::GetRotation(G4int) (" __HERE__ ")");
    // signature to use in the veto list: const G4RotationMatrix * G4TouchableHistory::GetRotation(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:121:37
    t.method("GetRotation", static_cast<const G4RotationMatrix * (G4TouchableHistory::*)(G4int)  const>(&G4TouchableHistory::GetRotation));
    t.method("GetRotation", [](G4TouchableHistory const& a)->const G4RotationMatrix * { return a.GetRotation(); });
    t.method("GetRotation", [](G4TouchableHistory const* a)->const G4RotationMatrix * { return a->GetRotation(); });

    DEBUG_MSG("Adding wrapper for G4int G4TouchableHistory::GetReplicaNumber(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4int G4TouchableHistory::GetReplicaNumber(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:123:26
    t.method("GetReplicaNumber", static_cast<G4int (G4TouchableHistory::*)(G4int)  const>(&G4TouchableHistory::GetReplicaNumber));
    t.method("GetReplicaNumber", [](G4TouchableHistory const& a)->G4int { return a.GetReplicaNumber(); });
    t.method("GetReplicaNumber", [](G4TouchableHistory const* a)->G4int { return a->GetReplicaNumber(); });

    DEBUG_MSG("Adding wrapper for G4int G4TouchableHistory::GetCopyNumber(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4int G4TouchableHistory::GetCopyNumber(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:124:18
    t.method("GetCopyNumber", static_cast<G4int (G4TouchableHistory::*)(G4int)  const>(&G4TouchableHistory::GetCopyNumber));
    t.method("GetCopyNumber", [](G4TouchableHistory const& a)->G4int { return a.GetCopyNumber(); });
    t.method("GetCopyNumber", [](G4TouchableHistory const* a)->G4int { return a->GetCopyNumber(); });

    DEBUG_MSG("Adding wrapper for G4int G4TouchableHistory::GetHistoryDepth() (" __HERE__ ")");
    // signature to use in the veto list: G4int G4TouchableHistory::GetHistoryDepth()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:125:26
    t.method("GetHistoryDepth", static_cast<G4int (G4TouchableHistory::*)()  const>(&G4TouchableHistory::GetHistoryDepth));

    DEBUG_MSG("Adding wrapper for G4int G4TouchableHistory::MoveUpHistory(G4int) (" __HERE__ ")");
    // signature to use in the veto list: G4int G4TouchableHistory::MoveUpHistory(G4int)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:126:19
    t.method("MoveUpHistory", static_cast<G4int (G4TouchableHistory::*)(G4int) >(&G4TouchableHistory::MoveUpHistory));
    t.method("MoveUpHistory", [](G4TouchableHistory& a)->G4int { return a.MoveUpHistory(); });
    t.method("MoveUpHistory", [](G4TouchableHistory* a)->G4int { return a->MoveUpHistory(); });

    DEBUG_MSG("Adding wrapper for void G4TouchableHistory::UpdateYourself(G4VPhysicalVolume *, const G4NavigationHistory *) (" __HERE__ ")");
    // signature to use in the veto list: void G4TouchableHistory::UpdateYourself(G4VPhysicalVolume *, const G4NavigationHistory *)
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:129:19
    t.method("UpdateYourself", static_cast<void (G4TouchableHistory::*)(G4VPhysicalVolume *, const G4NavigationHistory *) >(&G4TouchableHistory::UpdateYourself));
    t.method("UpdateYourself", [](G4TouchableHistory& a, G4VPhysicalVolume * arg0)->void { a.UpdateYourself(arg0); });
    t.method("UpdateYourself", [](G4TouchableHistory* a, G4VPhysicalVolume * arg0)->void { a->UpdateYourself(arg0); });

    DEBUG_MSG("Adding wrapper for const G4NavigationHistory * G4TouchableHistory::GetHistory() (" __HERE__ ")");
    // signature to use in the veto list: const G4NavigationHistory * G4TouchableHistory::GetHistory()
    // defined in /Users/mato/.julia/artifacts/04a1f392c53fa9913a6e32dc79e45dcf6f1dd250/include/Geant4/G4TouchableHistory.hh:133:47
    t.method("GetHistory", static_cast<const G4NavigationHistory * (G4TouchableHistory::*)()  const>(&G4TouchableHistory::GetHistory));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<G4TouchableHistory>> type_;
};
std::shared_ptr<Wrapper> newJlG4TouchableHistory(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlG4TouchableHistory(module));
}
